ANSI-C/cC++ Compiler for HC08 V-5.0.45 Build 14019, Jan 20 2014

    1:  /*****************************************************************************
    2:  * MyWirelessApp Demo Non Beacon End Device application.
    3:  *
    4:  * (c) Copyright 2008, Freescale, Inc. All rights reserved.
    5:  *
    6:  *
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from Freescale Semiconductor.
   10:  *
   11:  *****************************************************************************/
   12:  
   13:  #include "MApp.h"
   14:  #include "Sound.h"
   15:  #include "NVM_Interface.h"
   16:  #include "MyNewTask.h"
   17:  
   18:  /************************************************************************************
   19:  *************************************************************************************
   20:  * Private macros
   21:  *************************************************************************************
   22:  ************************************************************************************/
   23:  
   24:  /* If there are too many pending packets to be send over the air, */
   25:  /* receive mMaxKeysToReceive_c chars. */
   26:  /* The chars will be send over the air when there are no pending packets*/
   27:  #define mMaxKeysToReceive_c 32
   28:  
   29:  /************************************************************************************
   30:  *************************************************************************************
   31:  * Private prototypes
   32:  *************************************************************************************
   33:  ************************************************************************************/
   34:  
   35:  /* Forward declarations of helper functions */
   36:  static void    App_CommRxCallBack(void);
   37:  static uint8_t App_StartScan(uint8_t scanType);
   38:  static uint8_t App_HandleScanActiveConfirm(nwkMessage_t *pMsg);
   39:  static uint8_t App_WaitMsg(nwkMessage_t *pMsg, uint8_t msgType);
   40:  static uint8_t App_SendAssociateRequest(void);
   41:  static uint8_t App_HandleAssociateConfirm(nwkMessage_t *pMsg);
   42:  static uint8_t App_HandleMlmeInput(nwkMessage_t *pMsg);
   43:  static void    App_HandleMcpsInput(mcpsToNwkMessage_t *pMsgIn);
   44:  static void    App_TransmitCommData(void);
   45:  static void    AppPollWaitTimeout(uint8_t tmr);
   46:  #if (gMC1323xMatrixKBD_d == TRUE)
   47:  static void    App_HandleKeys(uint8_t events, uint8_t pressedKey);
   48:  #else
   49:  static void    App_HandleKeys(key_event_t events);
   50:  #endif //gMC1323xMatrixKBD_d
   51:  
   52:  /************************************************************************************
   53:  *************************************************************************************
   54:  * Private type definitions
   55:  *************************************************************************************
   56:  ************************************************************************************/
   57:  
   58:  
   59:  /************************************************************************************
   60:  *************************************************************************************
   61:  * Private memory declarations
   62:  *************************************************************************************
   63:  ************************************************************************************/
   64:  
   65:  /* Information about the PAN we are part of */
   66:  static panDescriptor_t mCoordInfo;
   67:  
   68:  /* This is either the short address assigned by the PAN coordinator
   69:     during association, or our own extended MAC address. */
   70:  static uint8_t maMyAddress[8];
   71:  /* The devices address mode. If 2, then maMyAddress contains the short
   72:     address assigned by the PAN coordinator. If 3, then maMyAddress is
   73:     equal to the extended address. */
   74:  static uint8_t mAddrMode;
   75:  
   76:  /* Data request packet for sending serial terminal interface input to the coordinator */
   77:  static nwkToMcpsMessage_t *mpPacket;
   78:  
   79:  /* The MSDU handle is a unique data packet identifier */
   80:  static uint8_t mMsduHandle;
   81:  
   82:  /* Number of pending data packets */
   83:  static uint8_t mcPendingPackets;
   84:  
   85:  /* Signals that an MLME-Poll request is pending, and that we must wait for 
   86:     the MLME-Poll confirm message before sending the next poll request. */
   87:  static bool_t mWaitPollConfirm;
   88:  
   89:  /* Time between MLME-Poll requests */
   90:  static uint16_t mPollInterval;
   91:  
   92:  /* Application input queues */
   93:  static anchor_t mMlmeNwkInputQueue;
   94:  static anchor_t mMcpsNwkInputQueue;
   95:  
   96:  static tmrTimerID_t mTimer_c = gTmrInvalidTimerID_c;
   97:  
   98:  /************************************************************************************
   99:  *************************************************************************************
  100:  * Public memory declarations
  101:  *************************************************************************************
  102:  ************************************************************************************/
  103:  
  104:  /* The current state of the applications state machine */
  105:  uint8_t gState;
  106:  
  107:  /* This data set contains application variables to be preserved across resets */
  108:  NvDataItemDescription_t const gaNvAppDataSet[] = {
  109:    {NULL, 0}       /* Required end-of-table marker. */
  110:  };
  111:  
  112:  /************************************************************************************
  113:  *************************************************************************************
  114:  * Public functions
  115:  *************************************************************************************
  116:  ************************************************************************************/
  117:  
  118:  void DeepSleepWakeupStackProc(void);
  119:  
  120:  /*****************************************************************************
  121:  * Initialization function for the App Task. This is called during
  122:  * initialization and should contain any application specific initialization
  123:  * (ie. hardware initialization/setup, table initialization, power up
  124:  * notificaiton.
  125:  *
  126:  * Interface assumptions: None
  127:  *
  128:  * Return value: None
  129:  *
  130:  *****************************************************************************/
  131:  void MApp_init(void)
  132:  { 
  133:    
  134:    /* The initial application state */
  135:    gState = stateInit;  
  0000 4f       [1]             CLRA  
  0001 c70000   [4]             STA   gState
  136:    /* Reset number of pending packets */
  137:    mcPendingPackets = 0;
  0004 c70000   [4]             STA   mcPendingPackets
  138:    
  139:    /* Allow sending a poll request */  
  140:    mWaitPollConfirm = FALSE;    
  0007 c70000   [4]             STA   mWaitPollConfirm
  141:    
  142:    /* Initialize the poll interval */
  143:    mPollInterval = mDefaultValueOfPollIntervalSlow_c;
  000a 450334   [3]             LDHX  #820
  000d 960000   [5]             STHX  mPollInterval
  144:  
  145:    /* Initialize the MAC 802.15.4 extended address */
  146:    Init_MacExtendedAddress();
  0010 ac000000 [8]             CALL  Init_MacExtendedAddress
  147:    mTimer_c = TMR_AllocateTimer();
  0014 ac000000 [8]             CALL  TMR_AllocateTimer
  0018 c70000   [4]             STA   mTimer_c
  148:    /* register keyboard callback function */
  149:    KBD_Init(App_HandleKeys);
  001b 450000   [3]             LDHX  @App_HandleKeys
  001e 89       [2]             PSHX  
  001f 8b       [2]             PSHH  
  0020 a600     [2]             LDA   @App_HandleKeys:PAGE
  0022 87       [2]             PSHA  
  0023 ac000000 [8]             CALL  KBD_Init
  0027 a703     [2]             AIS   #3
  150:    /* Initialize SPI Module */
  151:    SPI_Init();
  0029 ac000000 [8]             CALL  SPI1_Init
  152:    /* initialize LCD Module */
  153:    LCD_Init();
  154:    /* initialize LED Module */
  155:    LED_Init();
  002d ac000000 [8]             CALL  LED_Init
  156:    /* Initialize the LPM module */
  157:    PWRLib_Init();
  0031 ac000000 [8]             CALL  PWRLib_Init
  158:    /* Initialize the serial terminal interface so that we can print out status messages */
  159:    Comm_SetBaud(gUartDefaultBaud_c);
  0035 ae08     [2]             LDX   #8
  0037 8c       [1]             CLRH  
  0038 ac000000 [8]             CALL  Uart1_SetBaud
  160:    Comm_SetRxCallBack(App_CommRxCallBack);
  003c 450000   [3]             LDHX  @App_CommRxCallBack
  003f 89       [2]             PSHX  
  0040 8b       [2]             PSHH  
  0041 a600     [2]             LDA   @App_CommRxCallBack:PAGE
  0043 87       [2]             PSHA  
  0044 ac000000 [8]             CALL  Uart1_SetRxCallBack
  0048 a703     [2]             AIS   #3
  161:    
  162:    /* initialize buzzer (NCB, SRB only) */  
  163:    BuzzerInit();  
  164:    /* Prepare input queues.*/
  165:    MSG_InitQueue(&mMlmeNwkInputQueue); 
  004a 450000   [3]             LDHX  @mMlmeNwkInputQueue
  004d ac000000 [8]             CALL  List_ClearAnchor
  166:    MSG_InitQueue(&mMcpsNwkInputQueue);
  0051 450000   [3]             LDHX  @mMcpsNwkInputQueue
  0054 ac000000 [8]             CALL  List_ClearAnchor
  167:    /* Enable MCU interrupts */
  168:    IrqControlLib_EnableAllIrqs();
  0058 9a       [1]             CLI   
  169:    /*signal app ready*/  
  170:    Led1Flashing();
  0059 a601     [2]             LDA   #1
  005b ac000000 [8]             CALL  LED_StartFlash
  171:    Led2Flashing();
  005f a602     [2]             LDA   #2
  0061 ac000000 [8]             CALL  LED_StartFlash
  172:    Led3Flashing();
  0065 a604     [2]             LDA   #4
  0067 ac000000 [8]             CALL  LED_StartFlash
  173:    Led4Flashing();
  006b a608     [2]             LDA   #8
  006d ac000000 [8]             CALL  LED_StartFlash
  174:      
  175:    CommUtil_Print("\n\rPress any switch on board to start running the application.\n\r", gAllowToBlock_d);  
  0071 450000   [3]             LDHX  @"\012\015Press any switch on board to start running the application.\012\015"
  0074 a601     [2]             LDA   #1
  0076 ac000000 [8]             CALL  CommUtil_Print
  176:    LCD_ClearDisplay();
  177:    LCD_WriteString(1,"Press any key");
  178:    LCD_WriteString(2,"to start.");
  179:  }
  007a 8d       [7]             RTC   
  180:  
  181:  /*****************************************************************************
  182:  *Mac Application Task event processor.  This function is called to
  183:  * process all events for the task. Events include timers, messages and any
  184:  * other user defined events
  185:  *
  186:  * Interface assumptions: None
  187:  *
  188:  * Return value: None
  189:  *****************************************************************************/
  190:  void AppTask(event_t events) 
  191:  { 
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fb     [2]             AIS   #-5
  192:  
  193:    /* Pointer for storing the messages from MLME, MCPS, and ASP. */
  194:    void *pMsgIn;
  195:    /* Stores the status code returned by some functions. */
  196:    uint8_t rc;  
  197:    pMsgIn = NULL;
  0004 9e6f05   [6]             CLR   5,SP
  0007 9e6f04   [6]             CLR   4,SP
  198:    
  199:    /* Dequeue the MLME message */
  200:    if (events & gAppEvtMessageFromMLME_c)
  000a 9f       [1]             TXA   
  000b a504     [2]             BIT   #4
  000d 2726     [3]             BEQ   L35 ;abs = 0035
  201:    {
  202:      /* Get the message from MLME */
  203:      pMsgIn = MSG_DeQueue(&mMlmeNwkInputQueue);
  000f 450000   [3]             LDHX  @mMlmeNwkInputQueue
  0012 ac000000 [8]             CALL  List_RemoveHead
  0016 9eff04   [5]             STHX  4,SP
  204:      
  205:      /* Any time a beacon might arrive. Always handle the beacon frame first */
  206:      if (pMsgIn)
  0019 271a     [3]             BEQ   L35 ;abs = 0035
  207:      {               
  208:        rc = App_WaitMsg(pMsgIn, gNwkBeaconNotifyInd_c);
  001b a604     [2]             LDA   #4
  001d ac000000 [8]             CALL  App_WaitMsg
  209:        if(rc == errorNoError)
  0021 4d       [1]             TSTA  
  0022 2611     [3]             BNE   L35 ;abs = 0035
  210:        {
  211:          /* ALWAYS free the beacon frame contained in the beacon notify indication.*/
  212:          /* ALSO the application can use the beacon payload.*/
  213:          MSG_Free(((nwkMessage_t *)pMsgIn)->msgData.beaconNotifyInd.pBufferRoot);
  0024 9efe04   [5]             LDHX  4,SP
  0027 9ece0a   [5]             LDHX  10,X
  002a ac000000 [8]             CALL  MM_Free
  214:          CommUtil_Print("Received an MLME-Beacon Notify Indication\n\r", gAllowToBlock_d);
  002e 450000   [3]             LDHX  @"Received an MLME-Beacon Notify Indication\012\015"
  0031 ac00022d [8]             CALL  AppTask:557
  0035          L35:    
  215:        }
  216:      }
  217:    }
  218:    
  219:    /* The application state machine */
  220:    switch(gState)
  0035 ce0000   [4]             LDX   gState
  0038 a305     [2]             CPX   #5
  003a 2303     [3]             BLS   L3F ;abs = 003f
  003c cc0115   [4]             JMP   L115 ;abs = 0115
  003f          L3F:    
  003f 4f       [1]             CLRA  
  0040 cd0000   [6]             JSR   _Jump_Table_Header_Addr
  0043 0006             DC.W  6
  0045 01e1             DC.W  L1E1
  0047 0053             DC.W  L53
  0049 0059             DC.W  L59
  004b 0071             DC.W  L71
  004d 0117             DC.W  L117
  004f 013c             DC.W  L13C
  0051 01c6             DC.W  L1C6
  0053          L53:    
  221:    {
  222:    case stateInit:    
  223:      /* Print a welcome message to the serial terminal interface */
  224:      CommUtil_Print("\n\rMyWirelessApp Demo Non Beacon End Device application is initialized and ready.\n\r\n\r", gAllowToBlock_d);            
  0053 450000   [3]             LDHX  @"\012\015MyWirelessApp Demo Non Beacon End Device application is initialized and ready.\012\015\012\015"
  225:      /* Goto Active Scan state. */
  226:      gState = stateScanActiveStart;
  227:      TS_SendEvent(gAppTaskID_c, gAppEvtDummyEvent_c);    
  228:      break;
  0056 cc01b1   [4]             JMP   L1B1 ;abs = 01b1
  0059          L59:    
  229:      
  230:    case stateScanActiveStart:
  231:      /* Start the Active scan, and goto wait for confirm state. */
  232:      CommUtil_Print("Start scanning for a PAN coordinator\n\r", gAllowToBlock_d);
  0059 450000   [3]             LDHX  @"Start scanning for a PAN coordinator\012\015"
  005c ac00022d [8]             CALL  AppTask:557
  233:      /*print a message on the LCD also*/
  234:      LCD_ClearDisplay();
  235:      LCD_WriteString(1,"Start scanning");
  236:      LCD_WriteString(2,"for coordinator");  
  237:      rc = App_StartScan(gScanModeActive_c);
  0060 a601     [2]             LDA   #1
  0062 ac000000 [8]             CALL  App_StartScan
  238:      if(rc == errorNoError)
  0066 4d       [1]             TSTA  
  0067 2703     [3]             BEQ   L6C ;abs = 006c
  0069 cc0115   [4]             JMP   L115 ;abs = 0115
  006c          L6C:    
  239:      {
  240:        gState = stateScanActiveWaitConfirm;
  006c a602     [2]             LDA   #2
  006e cc0136   [4]             JMP   L136 ;abs = 0136
  0071          L71:    
  241:      }
  242:      break;
  243:      
  244:    case stateScanActiveWaitConfirm:
  245:      /* Stay in this state until the Scan confirm message
  246:         arrives, and then goto the associate state. */
  247:      if (events & gAppEvtMessageFromMLME_c)
  0071 95       [2]             TSX   
  0072 e606     [3]             LDA   6,X
  0074 a504     [2]             BIT   #4
  0076 2603     [3]             BNE   L7B ;abs = 007b
  0078 cc0115   [4]             JMP   L115 ;abs = 0115
  007b          L7B:    
  248:      {
  249:        if (pMsgIn)
  007b 9efe04   [5]             LDHX  4,SP
  007e 2603     [3]             BNE   L83 ;abs = 0083
  0080 cc0115   [4]             JMP   L115 ;abs = 0115
  0083          L83:    
  250:        {                     
  251:          rc = App_WaitMsg(pMsgIn, gNwkScanCnf_c);
  0083 9eff01   [5]             STHX  1,SP
  0086 a60b     [2]             LDA   #11
  0088 ac000000 [8]             CALL  App_WaitMsg
  252:          if(rc == errorNoError)
  008c 4d       [1]             TSTA  
  008d 2703     [3]             BEQ   L92 ;abs = 0092
  008f cc0115   [4]             JMP   L115 ;abs = 0115
  0092          L92:    
  253:          {
  254:            rc = App_HandleScanActiveConfirm(pMsgIn);
  0092 9efe01   [5]             LDHX  1,SP
  0095 ac000000 [8]             CALL  App_HandleScanActiveConfirm
  255:            if(rc == errorNoError)
  0099 4d       [1]             TSTA  
  009a 2672     [3]             BNE   L10E ;abs = 010e
  256:            {
  257:              CommUtil_Print("Found a coordinator with the following properties:\n\r", gAllowToBlock_d);
  009c 450000   [3]             LDHX  @"Found a coordinator with the following properties:\012\015"
  009f ac00022d [8]             CALL  AppTask:557
  258:              CommUtil_Print("----------------------------------------------------", gAllowToBlock_d);
  00a3 450000   [3]             LDHX  @"----------------------------------------------------"
  00a6 ac00022d [8]             CALL  AppTask:557
  259:              CommUtil_Print("\n\rAddress...........0x", gAllowToBlock_d); CommUtil_PrintHex(mCoordInfo.coordAddress, mCoordInfo.coordAddrMode == gAddrModeShort_c ? 2 : 8, 0);
  00aa 450000   [3]             LDHX  @"\012\015Address...........0x"
  00ad ac00022d [8]             CALL  AppTask:557
  00b1 450000   [3]             LDHX  @mCoordInfo
  00b4 89       [2]             PSHX  
  00b5 8b       [2]             PSHH  
  00b6 c6000a   [4]             LDA   mCoordInfo:10
  00b9 410202   [4]             CBEQA #2,LBE ;abs = 00be
  00bc a608     [2]             LDA   #8
  00be          LBE:    
  00be 95       [2]             TSX   
  00bf e704     [3]             STA   4,X
  00c1 ee04     [3]             LDX   4,X
  00c3 4f       [1]             CLRA  
  00c4 ac000000 [8]             CALL  CommUtil_PrintHex
  00c8 a702     [2]             AIS   #2
  260:              CommUtil_Print("\n\rPAN ID............0x", gAllowToBlock_d); CommUtil_PrintHex(mCoordInfo.coordPanId, 2, 0);
  00ca 450000   [3]             LDHX  @"\012\015PAN ID............0x"
  00cd ac00022d [8]             CALL  AppTask:557
  00d1 450008   [3]             LDHX  @mCoordInfo:8
  00d4 ac000234 [8]             CALL  AppTask:564
  261:              CommUtil_Print("\n\rLogical Channel...0x", gAllowToBlock_d); CommUtil_PrintHex(&mCoordInfo.logicalChannel, 1, 0);
  00d8 450000   [3]             LDHX  @"\012\015Logical Channel...0x"
  00db ac00022d [8]             CALL  AppTask:557
  00df 45000b   [3]             LDHX  @mCoordInfo:11
  00e2 ac000240 [8]             CALL  AppTask:576
  262:              CommUtil_Print("\n\rBeacon Spec.......0x", gAllowToBlock_d); CommUtil_PrintHex(mCoordInfo.superFrameSpec, 2, 0);
  00e6 450000   [3]             LDHX  @"\012\015Beacon Spec.......0x"
  00e9 ac00022d [8]             CALL  AppTask:557
  00ed 45000d   [3]             LDHX  @mCoordInfo:13
  00f0 ac000234 [8]             CALL  AppTask:564
  263:              CommUtil_Print("\n\rLink Quality......0x", gAllowToBlock_d); CommUtil_PrintHex(&mCoordInfo.linkQuality, 1, 0);
  00f4 450000   [3]             LDHX  @"\012\015Link Quality......0x"
  00f7 ac00022d [8]             CALL  AppTask:557
  00fb 450010   [3]             LDHX  @mCoordInfo:16
  00fe ac000240 [8]             CALL  AppTask:576
  264:              CommUtil_Print("\n\r\n\r", gAllowToBlock_d);
  0102 450000   [3]             LDHX  @"\012\015\012\015"
  0105 ac00022d [8]             CALL  AppTask:557
  265:  
  266:              gState = stateAssociate;
  0109 a603     [2]             LDA   #3
  267:              TS_SendEvent(gAppTaskID_c, gAppEvtDummyEvent_c);
  268:            }
  010b cc01ac   [4]             JMP   L1AC ;abs = 01ac
  010e          L10E:   
  269:            else
  270:  		      {
  271:              CommUtil_Print("Scan did not find a suitable coordinator\n\r", gAllowToBlock_d);
  010e 450000   [3]             LDHX  @"Scan did not find a suitable coordinator\012\015"
  0111 ac00022d [8]             CALL  AppTask:557
  0115          L115:   
  0115 2022     [3]             BRA   L139 ;abs = 0139
  0117          L117:   
  272:              /*print a message on the LCD also*/
  273:              LCD_ClearDisplay();
  274:              LCD_WriteString(1,"No coordinator");
  275:              LCD_WriteString(2,"found.");
  276:  		      }
  277:          
  278:  		   }
  279:        }
  280:      }
  281:      break;
  282:  
  283:    case stateAssociate:
  284:      /* Associate to the PAN coordinator */
  285:      CommUtil_Print("Associating to PAN coordinator on channel 0x", gAllowToBlock_d);
  0117 450000   [3]             LDHX  @"Associating to PAN coordinator on channel 0x"
  011a ac00022d [8]             CALL  AppTask:557
  286:      CommUtil_PrintHex(&(mCoordInfo.logicalChannel), 1, gPrtHexNewLine_c);
  011e 45000b   [3]             LDHX  @mCoordInfo:11
  0121 89       [2]             PSHX  
  0122 8b       [2]             PSHH  
  0123 ae01     [2]             LDX   #1
  0125 a602     [2]             LDA   #2
  0127 ac000000 [8]             CALL  CommUtil_PrintHex
  012b a702     [2]             AIS   #2
  287:      /*print a message on the LCD also*/
  288:      LCD_ClearDisplay();
  289:      LCD_WriteString(1,"Associating to ");
  290:      LCD_WriteString(2,"PAN coordinator");  
  291:      rc = App_SendAssociateRequest();
  012d ac000000 [8]             CALL  App_SendAssociateRequest
  292:      if(rc == errorNoError)
  0131 4d       [1]             TSTA  
  0132 2605     [3]             BNE   L139 ;abs = 0139
  293:        gState = stateAssociateWaitConfirm;
  0134 a604     [2]             LDA   #4
  0136          L136:   
  0136 c70000   [4]             STA   gState
  0139          L139:   
  0139 cc01c4   [4]             JMP   L1C4 ;abs = 01c4
  013c          L13C:   
  294:      break; 
  295:  
  296:    case stateAssociateWaitConfirm:
  297:      /* Stay in this state until the Associate confirm message
  298:         arrives, and then goto the Listen state. */
  299:      if (events & gAppEvtMessageFromMLME_c)
  013c 95       [2]             TSX   
  013d e606     [3]             LDA   6,X
  013f a504     [2]             BIT   #4
  0141 2703     [3]             BEQ   L146 ;abs = 0146
  300:      {
  301:        if (pMsgIn)
  0143 9efe04   [5]             LDHX  4,SP
  0146          L146:   
  0146 277c     [3]             BEQ   L1C4 ;abs = 01c4
  302:        {   
  303:          rc = App_WaitMsg(pMsgIn, gNwkAssociateCnf_c);
  0148 9eff01   [5]             STHX  1,SP
  014b a601     [2]             LDA   #1
  014d ac000000 [8]             CALL  App_WaitMsg
  304:          if(rc == errorNoError)
  0151 4d       [1]             TSTA  
  0152 2670     [3]             BNE   L1C4 ;abs = 01c4
  305:          {          
  306:            rc = App_HandleAssociateConfirm(pMsgIn);
  0154 9efe01   [5]             LDHX  1,SP
  0157 ac000000 [8]             CALL  App_HandleAssociateConfirm
  307:            if (rc == errorNoError)
  015b 4d       [1]             TSTA  
  015c 2650     [3]             BNE   L1AE ;abs = 01ae
  308:            { 
  309:  	          CommUtil_Print("Successfully associated with the coordinator.\n\r", gAllowToBlock_d);
  015e 450000   [3]             LDHX  @"Successfully associated with the coordinator.\012\015"
  0161 ac00022d [8]             CALL  AppTask:557
  310:  	          CommUtil_Print("We were assigned the short address 0x", gAllowToBlock_d);
  0165 450000   [3]             LDHX  @"We were assigned the short address 0x"
  0168 ac00022d [8]             CALL  AppTask:557
  311:  	          CommUtil_PrintHex(maMyAddress, mAddrMode == gAddrModeShort_c ? 2 : 8, 0);
  016c 450000   [3]             LDHX  @maMyAddress
  016f 89       [2]             PSHX  
  0170 8b       [2]             PSHH  
  0171 c60000   [4]             LDA   mAddrMode
  0174 410202   [4]             CBEQA #2,L179 ;abs = 0179
  0177 a608     [2]             LDA   #8
  0179          L179:   
  0179 95       [2]             TSX   
  017a e704     [3]             STA   4,X
  017c ee04     [3]             LDX   4,X
  017e 4f       [1]             CLRA  
  017f ac000000 [8]             CALL  CommUtil_PrintHex
  0183 a702     [2]             AIS   #2
  312:  	          CommUtil_Print("\n\r\n\rReady to send and receive data over the serial terminal interface.\n\r\n\r", gAllowToBlock_d);
  0185 450000   [3]             LDHX  @"\012\015\012\015Ready to send and receive data over the serial terminal interface.\012\015\012\015"
  0188 ac00022d [8]             CALL  AppTask:557
  313:  	          /*print a message on the LCD also*/
  314:  	          LCD_ClearDisplay();
  315:  	          LCD_WriteString(1,"Ready to send");
  316:  	          LCD_WriteString(2,"and receive data");    
  317:  	          /* Startup the timer */
  318:  	          TMR_StartSingleShotTimer(mTimer_c, mPollInterval, AppPollWaitTimeout);
  018c c60000   [4]             LDA   mTimer_c
  018f 87       [2]             PSHA  
  0190 320000   [5]             LDHX  mPollInterval
  0193 89       [2]             PSHX  
  0194 8b       [2]             PSHH  
  0195 4f       [1]             CLRA  
  0196 87       [2]             PSHA  
  0197 87       [2]             PSHA  
  0198 450000   [3]             LDHX  @AppPollWaitTimeout
  019b 89       [2]             PSHX  
  019c 8b       [2]             PSHH  
  019d a600     [2]             LDA   @AppPollWaitTimeout:PAGE
  019f 87       [2]             PSHA  
  01a0 ac000000 [8]             CALL  TMR_StartSingleShotTimer
  01a4 a708     [2]             AIS   #8
  319:  
  320:              /****NEWCODE: INIT 3 SEC TIMER****/
  321:              MyNewTaskInit();
  01a6 ac000000 [8]             CALL  MyNewTaskInit
  322:              /****NEWCODE: INIT 3 SEC TIMER****/
  323:              
  324:  	          /* Go to the listen state */
  325:  	          gState = stateListen;
  01aa a605     [2]             LDA   #5
  01ac          L1AC:   
  326:  	          TS_SendEvent(gAppTaskID_c, gAppEvtDummyEvent_c); 
  327:            }        
  01ac 2009     [3]             BRA   L1B7 ;abs = 01b7
  01ae          L1AE:   
  328:            else 
  329:            {
  330:            
  331:  	          CommUtil_Print("\n\rAssociate Confirm wasn't successful... \n\r\n\r", gAllowToBlock_d);
  01ae 450000   [3]             LDHX  @"\012\015Associate Confirm wasn't successful... \012\015\012\015"
  01b1          L1B1:   
  01b1 ac00022d [8]             CALL  AppTask:557
  332:  	          gState = stateScanActiveStart;
  01b5 a601     [2]             LDA   #1
  01b7          L1B7:   
  01b7 c70000   [4]             STA   gState
  333:                TS_SendEvent(gAppTaskID_c, gAppEvtDummyEvent_c);
  01ba c60000   [4]             LDA   gAppTaskID_c
  01bd ae01     [2]             LDX   #1
  01bf 8c       [1]             CLRH  
  01c0 ac000000 [8]             CALL  TS_SendEvent
  01c4          L1C4:   
  01c4 201b     [3]             BRA   L1E1 ;abs = 01e1
  01c6          L1C6:   
  334:            }
  335:          }
  336:        }
  337:      }
  338:      break; 
  339:      
  340:    case stateListen:
  341:      /* Transmit to coordinator data received from the serial terminal interface. */
  342:      if (events & gAppEvtMessageFromMLME_c)
  01c6 95       [2]             TSX   
  01c7 e606     [3]             LDA   6,X
  01c9 a504     [2]             BIT   #4
  01cb 2709     [3]             BEQ   L1D6 ;abs = 01d6
  343:      {  
  344:        if (pMsgIn)
  01cd 9efe04   [5]             LDHX  4,SP
  01d0 2704     [3]             BEQ   L1D6 ;abs = 01d6
  345:        {  
  346:          /* Process it */
  347:          rc = App_HandleMlmeInput(pMsgIn);
  01d2 ac000000 [8]             CALL  App_HandleMlmeInput
  01d6          L1D6:   
  348:        }
  349:      } 
  350:      
  351:      if (events & gAppEvtRxFromComm_c)
  01d6 95       [2]             TSX   
  01d7 e606     [3]             LDA   6,X
  01d9 a502     [2]             BIT   #2
  01db 2704     [3]             BEQ   L1E1 ;abs = 01e1
  352:      {      
  353:        /* get byte from serial terminal interface */
  354:        App_TransmitCommData();
  01dd ac000000 [8]             CALL  App_TransmitCommData
  01e1          L1E1:   
  355:      }  
  356:      break;
  357:    }
  358:    
  359:    if (pMsgIn)
  01e1 9efe04   [5]             LDHX  4,SP
  01e4 2704     [3]             BEQ   L1EA ;abs = 01ea
  360:    {
  361:      /* Messages must always be freed. */ 
  362:      MSG_Free(pMsgIn);
  01e6 ac000000 [8]             CALL  MM_Free
  01ea          L1EA:   
  363:    }
  364:    
  365:     /* Handle MCPS confirms and transmit data from serial terminal interface */
  366:    if (events & gAppEvtMessageFromMCPS_c)
  01ea 95       [2]             TSX   
  01eb e606     [3]             LDA   6,X
  01ed a508     [2]             BIT   #8
  01ef 271b     [3]             BEQ   L20C ;abs = 020c
  367:    {      
  368:      /* Get the message from MCPS */
  369:      pMsgIn = MSG_DeQueue(&mMcpsNwkInputQueue);
  01f1 450000   [3]             LDHX  @mMcpsNwkInputQueue
  01f4 ac000000 [8]             CALL  List_RemoveHead
  370:      if (pMsgIn)
  01f8 650000   [3]             CPHX  #0
  01fb 270f     [3]             BEQ   L20C ;abs = 020c
  371:      {              
  372:        /* Process it */
  373:        App_HandleMcpsInput(pMsgIn);
  01fd 89       [2]             PSHX  
  01fe 8b       [2]             PSHH  
  01ff ac000000 [8]             CALL  App_HandleMcpsInput
  374:        /* Messages from the MCPS must always be freed. */
  375:        MSG_Free(pMsgIn);
  0203 9efe01   [5]             LDHX  1,SP
  0206 ac000000 [8]             CALL  MM_Free
  020a a702     [2]             AIS   #2
  020c          L20C:   
  376:      }
  377:    }
  378:    
  379:    /* Check for pending messages in the Queue */ 
  380:    if(MSG_Pending(&mMcpsNwkInputQueue))
  020c 320000   [5]             LDHX  mMcpsNwkInputQueue
  020f 270a     [3]             BEQ   L21B ;abs = 021b
  381:      TS_SendEvent(gAppTaskID_c, gAppEvtMessageFromMCPS_c);
  0211 c60000   [4]             LDA   gAppTaskID_c
  0214 ae08     [2]             LDX   #8
  0216 8c       [1]             CLRH  
  0217 ac000000 [8]             CALL  TS_SendEvent
  021b          L21B:   
  382:    if(MSG_Pending(&mMlmeNwkInputQueue))
  021b 320000   [5]             LDHX  mMlmeNwkInputQueue
  021e 270a     [3]             BEQ   L22A ;abs = 022a
  383:      TS_SendEvent(gAppTaskID_c, gAppEvtMessageFromMLME_c);  
  0220 c60000   [4]             LDA   gAppTaskID_c
  0223 ae04     [2]             LDX   #4
  0225 8c       [1]             CLRH  
  0226 ac000000 [8]             CALL  TS_SendEvent
  022a          L22A:   
  384:  }
  022a a707     [2]             AIS   #7
  022c 8d       [7]             RTC   
  022d          L22D:   
  022d a601     [2]             LDA   #1
  022f ac000000 [8]             CALL  CommUtil_Print
  0233 8d       [7]             RTC   
  0234          L234:   
  0234 89       [2]             PSHX  
  0235 8b       [2]             PSHH  
  0236 ae02     [2]             LDX   #2
  0238 4f       [1]             CLRA  
  0239 ac000000 [8]             CALL  CommUtil_PrintHex
  023d a702     [2]             AIS   #2
  023f 8d       [7]             RTC   
  0240          L240:   
  0240 89       [2]             PSHX  
  0241 8b       [2]             PSHH  
  0242 ae01     [2]             LDX   #1
  0244 4f       [1]             CLRA  
  0245 ac000000 [8]             CALL  CommUtil_PrintHex
  0249 a702     [2]             AIS   #2
  024b 8d       [7]             RTC   
  385:  
  386:  /************************************************************************************
  387:  *************************************************************************************
  388:  * Private functions
  389:  *************************************************************************************
  390:  ************************************************************************************/
  391:  
  392:  /*****************************************************************************
  393:  * App_CommRxCallBack
  394:  *
  395:  * This callback is triggered when a new byte is received over the serial terminal interface
  396:  *
  397:  *****************************************************************************/
  398:  static void App_CommRxCallBack(void) 
  399:  {
  0000 8b       [2]             PSHH  
  400:    uint8_t pressedKey;
  401:  	if(stateListen == gState){
  0001 c60000   [4]             LDA   gState
  0004 a105     [2]             CMP   #5
  0006 260c     [3]             BNE   L14 ;abs = 0014
  402:      TS_SendEvent(gAppTaskID_c, gAppEvtRxFromComm_c);
  0008 c60000   [4]             LDA   gAppTaskID_c
  000b ae02     [2]             LDX   #2
  000d 8c       [1]             CLRH  
  000e ac000000 [8]             CALL  TS_SendEvent
  403:    }else{
  404:  	  (void)Comm_GetByteFromRxBuffer(&pressedKey);
  405:    }
  406:  }
  0012 8a       [3]             PULH  
  0013 8d       [7]             RTC   
  0014          L14:    
  0014 95       [2]             TSX   
  0015 ac000000 [8]             CALL  Uart1_GetByteFromRxBuffer
  0019 8a       [3]             PULH  
  001a 8d       [7]             RTC   
  407:  
  408:  /******************************************************************************
  409:  * The App_StartScan(scanType) function will start the scan process of the
  410:  * specified type in the MAC. This is accomplished by allocating a MAC message,
  411:  * which is then assigned the desired scan parameters and sent to the MLME
  412:  * service access point.
  413:  * The function may return either of the following values:
  414:  *   errorNoError:          The Scan message was sent successfully.
  415:  *   errorInvalidParameter: The MLME service access point rejected the
  416:  *                          message due to an invalid parameter.
  417:  *   errorAllocFailed:      A message buffer could not be allocated.
  418:  *
  419:  ******************************************************************************/
  420:  static uint8_t App_StartScan(uint8_t scanType)
  421:  {
  0000 87       [2]             PSHA  
  0001 a7fe     [2]             AIS   #-2
  422:    mlmeMessage_t *pMsg;
  423:    mlmeScanReq_t *pScanReq;
  424:  
  425:    CommUtil_Print("Sending the MLME-Scan Request message to the MAC...", gAllowToBlock_d);
  0003 450000   [3]             LDHX  @"Sending the MLME-Scan Request message to the MAC..."
  0006 ac000058 [8]             CALL  App_StartScan:88
  426:  
  427:    /* Allocate a message for the MLME (We should check for NULL). */
  428:    pMsg = MSG_AllocType(mlmeMessage_t);
  000a a623     [2]             LDA   #35
  000c ac000000 [8]             CALL  MM_Alloc
  0010 9eff01   [5]             STHX  1,SP
  429:    if(pMsg != NULL)
  0013 2737     [3]             BEQ   L4C ;abs = 004c
  430:    {
  431:      /* This is a MLME-SCAN.req command */
  432:      pMsg->msgType = gMlmeScanReq_c;
  0015 a608     [2]             LDA   #8
  0017 f7       [2]             STA   ,X
  433:      /* Create the Scan request message data. */
  434:      pScanReq = &pMsg->msgData.scanReq;
  435:      /* gScanModeED_c, gScanModeActive_c, gScanModePassive_c, or gScanModeOrphan_c */
  436:      pScanReq->scanType = scanType;
  0018 9ee603   [4]             LDA   3,SP
  001b e701     [3]             STA   1,X
  437:      /* ChannelsToScan & 0xFF - LSB, always 0x00 */
  438:      pScanReq->scanChannels[0] = (uint8_t)((mDefaultValueOfChannel_c)     & 0xFF);
  001d 6f02     [5]             CLR   2,X
  439:      /* ChannelsToScan>>8 & 0xFF  */
  440:      pScanReq->scanChannels[1] = (uint8_t)((mDefaultValueOfChannel_c>>8)  & 0xFF);
  001f 6f03     [5]             CLR   3,X
  441:      /* ChannelsToScan>>16 & 0xFF  */
  442:      pScanReq->scanChannels[2] = (uint8_t)((mDefaultValueOfChannel_c>>16) & 0xFF);
  0021 6f04     [5]             CLR   4,X
  443:      /* ChannelsToScan>>24 & 0xFF - MSB */
  444:      pScanReq->scanChannels[3] = (uint8_t)((mDefaultValueOfChannel_c>>24) & 0xFF);
  0023 a601     [2]             LDA   #1
  0025 e705     [3]             STA   5,X
  445:      /* Duration per channel 0-14 (dc). T[sec] = (16*960*((2^dc)+1))/1000000.
  446:         A scan duration of 3 on 16 channels approximately takes 2 secs. */
  447:      pScanReq->scanDuration = 3;
  0027 a603     [2]             LDA   #3
  0029 e706     [3]             STA   6,X
  448:  #ifdef gMAC2006_d
  449:      pScanReq->securityLevel = 0;
  002b 6f07     [5]             CLR   7,X
  450:  #endif //gMAC2006_d    
  451:      
  452:      /* Send the Scan request to the MLME. */
  453:      if(MSG_Send(NWK_MLME, pMsg) == gSuccess_c)
  002d 9efe01   [5]             LDHX  1,SP
  0030 ac000000 [8]             CALL  NWK_MLME_SapHandler
  0034 4d       [1]             TSTA  
  0035 260a     [3]             BNE   L41 ;abs = 0041
  454:      {
  455:        CommUtil_Print("Done\n\r", gAllowToBlock_d);
  0037 450000   [3]             LDHX  @"Done\012\015"
  003a ac000058 [8]             CALL  App_StartScan:88
  456:        return errorNoError;
  003e 4f       [1]             CLRA  
  003f 2014     [3]             BRA   L55 ;abs = 0055
  0041          L41:    
  457:      }
  458:      else
  459:      {
  460:        CommUtil_Print("Invalid parameter!\n\r", gAllowToBlock_d);
  0041 450000   [3]             LDHX  @"Invalid parameter!\012\015"
  0044 ac000058 [8]             CALL  App_StartScan:88
  461:        return errorInvalidParameter;
  0048 a605     [2]             LDA   #5
  004a 2009     [3]             BRA   L55 ;abs = 0055
  004c          L4C:    
  462:      }
  463:    }
  464:    else
  465:    {
  466:      /* Allocation of a message buffer failed. */
  467:      CommUtil_Print("Message allocation failed!\n\r", gAllowToBlock_d);
  004c 450000   [3]             LDHX  @"Message allocation failed!\012\015"
  004f ac000058 [8]             CALL  App_StartScan:88
  468:      return errorAllocFailed;
  0053 a604     [2]             LDA   #4
  0055          L55:    
  469:    }
  470:  }
  0055 a703     [2]             AIS   #3
  0057 8d       [7]             RTC   
  0058          L58:    
  0058 a601     [2]             LDA   #1
  005a ac000000 [8]             CALL  CommUtil_Print
  005e 8d       [7]             RTC   
  471:  
  472:  /******************************************************************************
  473:  * The App_HandleScanActiveConfirm(nwkMessage_t *pMsg) function will handle the
  474:  * Active Scan confirm message received from the MLME when the Active scan has
  475:  * completed. The message contains a list of PAN descriptors. Based on link
  476:  * quality inforamtion in the pan descriptors the nearest coordinator is chosen.
  477:  * The corresponding pan descriptor is stored in the global variable mCoordInfo. 
  478:  *
  479:  * The function may return either of the following values:
  480:  *   errorNoError:       A suitable pan descriptor was found.
  481:  *   errorNoScanResults: No scan results were present in the confirm message.
  482:  *
  483:  ******************************************************************************/
  484:  static uint8_t App_HandleScanActiveConfirm(nwkMessage_t *pMsg)
  485:  {
  0000 a7f9     [2]             AIS   #-7
  486:    void    *pBlock;
  487:    uint8_t panDescListSize = pMsg->msgData.scanCnf.resultListSize;
  0002 e603     [3]             LDA   3,X
  488:    uint8_t rc = errorNoScanResults;
  0004 87       [2]             PSHA  
  0005 a606     [2]             LDA   #6
  0007 9ee707   [4]             STA   7,SP
  489:    uint8_t j;
  490:    uint8_t bestLinkQuality = 0;  
  000a 9e6f08   [6]             CLR   8,SP
  491:    panDescriptorBlock_t *pDescBlock = pMsg->msgData.scanCnf.resList.pPanDescriptorBlocks;  
  000d 9ece08   [5]             LDHX  8,X
  0010 9eff04   [5]             STHX  4,SP
  492:    panDescriptor_t *pPanDesc;    
  493:    
  494:   
  495:    /* Check if the scan resulted in any coordinator responses. */  
  496:    
  497:    if (panDescListSize > 0)
  0013 86       [3]             PULA  
  0014 a100     [2]             CMP   #0
  0016 2269     [3]             BHI   L81 ;abs = 0081
  0018 206c     [3]             BRA   L86 ;abs = 0086
  001a          L1A:    
  498:    {    
  499:      /* Check all PAN descriptors. */
  500:      while (NULL != pDescBlock)
  501:      {
  502:        for (j = 0; j < pDescBlock->descriptorCount; j++)
  001a 95       [2]             TSX   
  001b 6f04     [5]             CLR   4,X
  001d 2047     [3]             BRA   L66 ;abs = 0066
  001f          L1F:    
  503:        {            
  504:          pPanDesc = &pDescBlock->descriptorList[j];
  001f 95       [2]             TSX   
  0020 e604     [3]             LDA   4,X
  0022 ae1f     [2]             LDX   #31
  0024 42       [5]             MUL   
  0025 9efe03   [5]             LDHX  3,SP
  0028 9eeb04   [4]             ADD   4,SP
  002b 87       [2]             PSHA  
  002c 8b       [2]             PSHH  
  002d 86       [3]             PULA  
  002e a900     [2]             ADC   #0
  0030 88       [3]             PULX  
  505:  
  506:          /* Only attempt to associate if the coordinator
  507:             accepts associations and is non-beacon. */
  508:          if( ( pPanDesc->superFrameSpec[1] & gSuperFrameSpecMsbAssocPermit_c) && 
  0031 87       [2]             PSHA  
  0032 8a       [3]             PULH  
  0033 e60e     [3]             LDA   14,X
  0035 2a2c     [3]             BPL   L63 ;abs = 0063
  509:              ((pPanDesc->superFrameSpec[0] & gSuperFrameSpecLsbBO_c) == 0x0F) )
  0037 e60d     [3]             LDA   13,X
  0039 a40f     [2]             AND   #15
  003b a10f     [2]             CMP   #15
  003d 2624     [3]             BNE   L63 ;abs = 0063
  510:          {        
  511:            
  512:            /* Find the nearest coordinator using the link quality measure. */
  513:            if(pPanDesc->linkQuality > bestLinkQuality)
  003f 9ee607   [4]             LDA   7,SP
  0042 e110     [3]             CMP   16,X
  0044 241d     [3]             BCC   L63 ;abs = 0063
  514:            {
  515:              /* Save the information of the coordinator candidate. If we
  516:                 find a better candiate, the information will be replaced. */
  517:              FLib_MemCpy(&mCoordInfo, pPanDesc, sizeof(panDescriptor_t));
  0046 9eff01   [5]             STHX  1,SP
  0049 450000   [3]             LDHX  @mCoordInfo
  004c 89       [2]             PSHX  
  004d 8b       [2]             PSHH  
  004e 9efe03   [5]             LDHX  3,SP
  0051 a61f     [2]             LDA   #31
  0053 ac000000 [8]             CALL  FLib_MemCpy
  0057 a702     [2]             AIS   #2
  518:              bestLinkQuality = pPanDesc->linkQuality;
  0059 9efe01   [5]             LDHX  1,SP
  005c e610     [3]             LDA   16,X
  005e 95       [2]             TSX   
  005f e706     [3]             STA   6,X
  519:              rc = errorNoError;
  0061 6f05     [5]             CLR   5,X
  0063          L63:    
  0063 95       [2]             TSX   
  0064 6c04     [5]             INC   4,X
  0066          L66:    
  0066 9efe03   [5]             LDHX  3,SP
  0069 e67c     [3]             LDA   124,X
  006b 9ee105   [4]             CMP   5,SP
  006e 22af     [3]             BHI   L1F ;abs = 001f
  520:            }
  521:          }      
  522:        }
  523:        
  524:        /* Free current block */
  525:        pBlock = pDescBlock;
  526:        pDescBlock = pDescBlock->pNext;              
  0070 89       [2]             PSHX  
  0071 8b       [2]             PSHH  
  0072 9ece7d   [5]             LDHX  125,X
  0075 9eff05   [5]             STHX  5,SP
  527:        MSG_Free(pBlock);
  0078 9efe01   [5]             LDHX  1,SP
  007b ac000000 [8]             CALL  MM_Free
  007f a702     [2]             AIS   #2
  0081          L81:    
  0081 9efe03   [5]             LDHX  3,SP
  0084 2694     [3]             BNE   L1A ;abs = 001a
  0086          L86:    
  528:      }
  529:    }
  530:    
  531:    if (pDescBlock)
  0086 9efe03   [5]             LDHX  3,SP
  0089 2704     [3]             BEQ   L8F ;abs = 008f
  532:        MSG_Free(pDescBlock);
  008b ac000000 [8]             CALL  MM_Free
  008f          L8F:    
  533:    
  534:    return rc;
  008f 95       [2]             TSX   
  0090 e605     [3]             LDA   5,X
  535:  }
  0092 a707     [2]             AIS   #7
  0094 8d       [7]             RTC   
  536:  
  537:  /******************************************************************************
  538:  * The App_SendAssociateRequest(void) will create an Associate Request message
  539:  * and send it to the coordinator it wishes to associate to. The function uses
  540:  * information gained about the coordinator during the scan procedure.
  541:  *
  542:  * The function may return either of the following values:
  543:  *   errorNoError:          The Associate Request message was sent successfully.
  544:  *   errorInvalidParameter: The MLME service access point rejected the
  545:  *                          message due to an invalid parameter.
  546:  *   errorAllocFailed:      A message buffer could not be allocated.
  547:  *
  548:  ******************************************************************************/
  549:  static uint8_t App_SendAssociateRequest(void)
  550:  {
  0000 a7fc     [2]             AIS   #-4
  551:    mlmeMessage_t *pMsg;
  552:    mlmeAssociateReq_t *pAssocReq;
  553:  
  554:    CommUtil_Print("Sending the MLME-Associate Request message to the MAC...", gAllowToBlock_d);
  0002 450000   [3]             LDHX  @"Sending the MLME-Associate Request message to the MAC..."
  0005 ac000077 [8]             CALL  App_SendAssociateRequest:119
  555:    
  556:    /* Allocate a message for the MLME message. */
  557:    pMsg = MSG_AllocType(mlmeMessage_t);
  0009 a623     [2]             LDA   #35
  000b ac000000 [8]             CALL  MM_Alloc
  000f 9eff03   [5]             STHX  3,SP
  558:    if(pMsg != NULL)
  0012 2757     [3]             BEQ   L6B ;abs = 006b
  559:    {
  560:      /* This is a MLME-ASSOCIATE.req command. */
  561:      pMsg->msgType = gMlmeAssociateReq_c;
  0014 7f       [4]             CLR   ,X
  562:      
  563:      /* Create the Associate request message data. */
  564:      pAssocReq = &pMsg->msgData.associateReq;
  0015 af01     [2]             AIX   #1
  565:   
  566:      /* Use the coordinator info we got from the Active Scan. */
  567:      FLib_MemCpy(pAssocReq->coordAddress, mCoordInfo.coordAddress, 8);
  0017 89       [2]             PSHX  
  0018 8b       [2]             PSHH  
  0019 9eff03   [5]             STHX  3,SP
  001c 450000   [3]             LDHX  @mCoordInfo
  001f a608     [2]             LDA   #8
  0021 ac000000 [8]             CALL  FLib_MemCpy
  0025 a702     [2]             AIS   #2
  568:      FLib_MemCpy(pAssocReq->coordPanId,   mCoordInfo.coordPanId, 2);
  0027 9efe01   [5]             LDHX  1,SP
  002a af08     [2]             AIX   #8
  002c 89       [2]             PSHX  
  002d 8b       [2]             PSHH  
  002e 450008   [3]             LDHX  @mCoordInfo:8
  0031 a602     [2]             LDA   #2
  0033 ac000000 [8]             CALL  FLib_MemCpy
  0037 a702     [2]             AIS   #2
  569:      pAssocReq->coordAddrMode      = mCoordInfo.coordAddrMode;
  0039 c6000a   [4]             LDA   mCoordInfo:10
  003c 9efe01   [5]             LDHX  1,SP
  003f e70a     [3]             STA   10,X
  570:      pAssocReq->logicalChannel     = mCoordInfo.logicalChannel;
  0041 c6000b   [4]             LDA   mCoordInfo:11
  0044 e70b     [3]             STA   11,X
  571:  #ifndef gMAC2006_d    
  572:      pAssocReq->securityEnable     = FALSE;
  573:  #else    
  574:      pAssocReq->securityLevel = 0;
  0046 6f0c     [5]             CLR   12,X
  575:  #endif //gMAC2006_d    
  576:      /* We want the coordinator to assign a short address to us. */
  577:      pAssocReq->capabilityInfo     = gCapInfoAllocAddr_c;
  0048 a680     [2]             LDA   #-128
  004a e717     [3]             STA   23,X
  578:        
  579:      /* Send the Associate Request to the MLME. */
  580:      if(MSG_Send(NWK_MLME, pMsg) == gSuccess_c)
  004c 9efe03   [5]             LDHX  3,SP
  004f ac000000 [8]             CALL  NWK_MLME_SapHandler
  0053 4d       [1]             TSTA  
  0054 260a     [3]             BNE   L60 ;abs = 0060
  581:      {
  582:        CommUtil_Print("Done\n\r", gAllowToBlock_d);
  0056 450000   [3]             LDHX  @"Done\012\015"
  0059 ac000077 [8]             CALL  App_SendAssociateRequest:119
  583:        return errorNoError;
  005d 4f       [1]             CLRA  
  005e 2014     [3]             BRA   L74 ;abs = 0074
  0060          L60:    
  584:      }
  585:      else
  586:      {
  587:        /* One or more parameters in the message were invalid. */
  588:        CommUtil_Print("Invalid parameter!\n\r", gAllowToBlock_d);
  0060 450000   [3]             LDHX  @"Invalid parameter!\012\015"
  0063 ac000077 [8]             CALL  App_SendAssociateRequest:119
  589:        return errorInvalidParameter;
  0067 a605     [2]             LDA   #5
  0069 2009     [3]             BRA   L74 ;abs = 0074
  006b          L6B:    
  590:      }
  591:    }
  592:    else
  593:    {
  594:      /* Allocation of a message buffer failed. */
  595:      CommUtil_Print("Message allocation failed!\n\r", gAllowToBlock_d);
  006b 450000   [3]             LDHX  @"Message allocation failed!\012\015"
  006e ac000077 [8]             CALL  App_SendAssociateRequest:119
  596:      return errorAllocFailed;
  0072 a604     [2]             LDA   #4
  0074          L74:    
  597:    }
  598:  }
  0074 a704     [2]             AIS   #4
  0076 8d       [7]             RTC   
  0077          L77:    
  0077 a601     [2]             LDA   #1
  0079 ac000000 [8]             CALL  CommUtil_Print
  007d 8d       [7]             RTC   
  599:  
  600:  /******************************************************************************
  601:  * The App_HandleAssociateConfirm(nwkMessage_t *pMsg) function will handle the
  602:  * Associate confirm message received from the MLME when the Association
  603:  * procedure has completed. The message contains the short address that the
  604:  * coordinator has assigned to us. This address is 0xfffe if we did not specify
  605:  * the gCapInfoAllocAddr_c flag in the capability info field of the Associate
  606:  * request. The address and address mode are saved in global variables. They
  607:  * will be used in the next demo application when sending data.
  608:  *
  609:  ******************************************************************************/
  610:  static uint8_t App_HandleAssociateConfirm(nwkMessage_t *pMsg)
  611:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  612:    /* This is our own extended address (MAC address). It cannot be modified. */
  613:    extern uint8_t aExtendedAddress[8];
  614:    
  615:    /* If the coordinator assigns a short address of 0xfffe then,
  616:       that means we must use our own extended address in all
  617:       communications with the coordinator. Otherwise, we use
  618:       the short address assigned to us. */
  619:    if ( pMsg->msgData.associateCnf.status == gSuccess_c) 
  0002 6d03     [4]             TST   3,X
  0004 2633     [3]             BNE   L39 ;abs = 0039
  620:    {
  621:  
  622:  	  if( (pMsg->msgData.associateCnf.assocShortAddress[0] >= 0xFE) && 
  0006 e601     [3]             LDA   1,X
  0008 a1fe     [2]             CMP   #-2
  000a 2516     [3]             BCS   L22 ;abs = 0022
  623:  	      (pMsg->msgData.associateCnf.assocShortAddress[1] == 0xFF) )
  000c e602     [3]             LDA   2,X
  000e 4c       [1]             INCA  
  000f 2611     [3]             BNE   L22 ;abs = 0022
  624:  	  {
  625:  	    mAddrMode = gAddrModeLong_c;
  0011 a603     [2]             LDA   #3
  0013 c70000   [4]             STA   mAddrMode
  626:  	    FLib_MemCpy(maMyAddress, (void *)aExtendedAddress, 8);
  0016 450000   [3]             LDHX  @maMyAddress
  0019 89       [2]             PSHX  
  001a 8b       [2]             PSHH  
  001b 450000   [3]             LDHX  @aExtendedAddress
  001e a608     [2]             LDA   #8
  627:  	  }
  0020 200f     [3]             BRA   L31 ;abs = 0031
  0022          L22:    
  628:  	  else
  629:  	  {
  630:  	    mAddrMode = gAddrModeShort_c;
  0022 a602     [2]             LDA   #2
  0024 c70000   [4]             STA   mAddrMode
  631:  	    FLib_MemCpy(maMyAddress, pMsg->msgData.associateCnf.assocShortAddress, 2);
  0027 450000   [3]             LDHX  @maMyAddress
  002a 89       [2]             PSHX  
  002b 8b       [2]             PSHH  
  002c 9efe03   [5]             LDHX  3,SP
  002f af01     [2]             AIX   #1
  0031          L31:    
  0031 ac000000 [8]             CALL  FLib_MemCpy
  0035 a702     [2]             AIS   #2
  632:  	  }
  633:  	    return gSuccess_c;
  0037 4f       [1]             CLRA  
  0038 65       [3]             SKIP2 L3B ;abs = 003b
  0039          L39:    
  634:    } 
  635:    
  636:    else 
  637:    {
  638:  	return pMsg->msgData.associateCnf.status; 
  0039 e603     [3]             LDA   3,X
  003b          L3B:    
  639:    }
  640:  }
  003b a702     [2]             AIS   #2
  003d 8d       [7]             RTC   
  641:  /******************************************************************************
  642:  * The App_HandleMlmeInput(nwkMessage_t *pMsg) function will handle various
  643:  * messages from the MLME, e.g. poll confirm.
  644:  *
  645:  * The function may return either of the following values:
  646:  *   errorNoError:   The message was processed.
  647:  *   errorNoMessage: The message pointer is NULL.
  648:  ******************************************************************************/
  649:  static uint8_t App_HandleMlmeInput(nwkMessage_t *pMsg)
  650:  {
  651:    if(pMsg == NULL)
  0000 650000   [3]             CPHX  #0
  0003 2603     [3]             BNE   L8 ;abs = 0008
  652:      return errorNoMessage;
  0005 a603     [2]             LDA   #3
  0007 8d       [7]             RTC   
  0008          L8:     
  653:    
  654:    /* Handle the incoming message. The type determines the sort of processing.*/
  655:    switch(pMsg->msgType) {
  0008 f6       [3]             LDA   ,X
  0009 a110     [2]             CMP   #16
  000b 260e     [3]             BNE   L1B ;abs = 001b
  656:    case gNwkPollCnf_c:
  657:      if(pMsg->msgData.pollCnf.status != gSuccess_c)
  000d 6d01     [4]             TST   1,X
  000f 270a     [3]             BEQ   L1B ;abs = 001b
  658:      {
  659:        /* The Poll Confirm status was not successful. Usually this happens if
  660:           no data was available at the coordinator. In this case we start
  661:           polling at a lower rate to conserve power. */
  662:        mPollInterval = mDefaultValueOfPollIntervalSlow_c;
  0011 450334   [3]             LDHX  #820
  0014 960000   [5]             STHX  mPollInterval
  663:        
  664:        /* If we get to this point, then no data was available, and we
  665:           allow a new poll request. Otherwise, we wait for the data
  666:           indication before allowing the next poll request. */
  667:        mWaitPollConfirm = FALSE;
  0017 4f       [1]             CLRA  
  0018 c70000   [4]             STA   mWaitPollConfirm
  001b          L1B:    
  668:      }
  669:      break;
  670:    }
  671:    return errorNoError;
  001b 4f       [1]             CLRA  
  672:  }
  001c 8d       [7]             RTC   
  673:  
  674:  /******************************************************************************
  675:  * The App_HandleMcpsInput(mcpsToNwkMessage_t *pMsgIn) function will handle 
  676:  * messages from the MCPS, e.g. Data Confirm, and Data Indication.
  677:  *
  678:  ******************************************************************************/
  679:  static void App_HandleMcpsInput(mcpsToNwkMessage_t *pMsgIn)
  680:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fe     [2]             AIS   #-2
  681:    switch(pMsgIn->msgType)
  0004 f6       [3]             LDA   ,X
  0005 2704     [3]             BEQ   LB ;abs = 000b
  0007 4b29     [4]             DBNZA L32 ;abs = 0032
  0009 200b     [3]             BRA   L16 ;abs = 0016
  000b          LB:     
  682:    {
  683:      /* The MCPS-Data confirm is sent by the MAC to the network 
  684:         or application layer when data has been sent. */
  685:    case gMcpsDataCnf_c:
  686:      if(mcPendingPackets)
  000b c60000   [4]             LDA   mcPendingPackets
  000e 2722     [3]             BEQ   L32 ;abs = 0032
  687:        mcPendingPackets--;
  0010 450000   [3]             LDHX  @mcPendingPackets
  0013 7a       [4]             DEC   ,X
  0014 201c     [3]             BRA   L32 ;abs = 0032
  0016          L16:    
  688:      break;
  689:  
  690:    case gMcpsDataInd_c:
  691:      /* Copy the received data to the serial terminal interface. */
  692:      CommUtil_Tx(pMsgIn->msgData.dataInd.pMsdu, pMsgIn->msgData.dataInd.msduLength);
  0016 9ece29   [5]             LDHX  41,X
  0019 9eff01   [5]             STHX  1,SP
  001c 9efe03   [5]             LDHX  3,SP
  001f e617     [3]             LDA   23,X
  0021 9efe01   [5]             LDHX  1,SP
  0024 ac000000 [8]             CALL  CommUtil_Tx
  693:      /* Since we received data, the coordinator might have more to send. We 
  694:         reduce the polling interval to raise the throughput while data is
  695:         available. */
  696:      mPollInterval = mDefaultValueOfPollIntervalFast_c;
  0028 ae52     [2]             LDX   #82
  002a 8c       [1]             CLRH  
  002b 960000   [5]             STHX  mPollInterval
  697:      /* Allow another MLME-Poll request. */
  698:      mWaitPollConfirm = FALSE;
  002e 4f       [1]             CLRA  
  002f c70000   [4]             STA   mWaitPollConfirm
  0032          L32:    
  699:      break;
  700:    }
  701:  }
  0032 a704     [2]             AIS   #4
  0034 8d       [7]             RTC   
  702:  
  703:  /******************************************************************************
  704:  * The App_WaitMsg(nwkMessage_t *pMsg, uint8_t msgType) function does not, as
  705:  * the name implies, wait for a message, thus blocking the execution of the
  706:  * state machine. Instead the function analyzes the supplied message to 
  707:  * determine whether or not the message is of the expected type.
  708:  * The function may return either of the following values:
  709:  *   errorNoError: The message was of the expected type.
  710:  *   errorNoMessage: The message pointer is NULL.
  711:  *   errorWrongConfirm: The message is not of the expected type.
  712:  *
  713:  ******************************************************************************/
  714:  static uint8_t App_WaitMsg(nwkMessage_t *pMsg, uint8_t msgType)
  715:  {
  716:    /* Do we have a message? If not, the exit with error code */
  717:    if(pMsg == NULL)
  0000 650000   [3]             CPHX  #0
  0003 2603     [3]             BNE   L8 ;abs = 0008
  718:      return errorNoMessage;
  0005 a603     [2]             LDA   #3
  0007 8d       [7]             RTC   
  0008          L8:     
  719:  
  720:    /* Is it the expected message type? If not then exit with error code */
  721:    if(pMsg->msgType != msgType)
  0008 f1       [3]             CMP   ,X
  0009 2703     [3]             BEQ   LE ;abs = 000e
  722:      return errorWrongConfirm;
  000b a601     [2]             LDA   #1
  000d 8d       [7]             RTC   
  000e          LE:     
  723:  
  724:    /* Found the expected message. Return with success code */
  725:    return errorNoError;
  000e 4f       [1]             CLRA  
  726:  }
  000f 8d       [7]             RTC   
  727:  
  728:  /******************************************************************************
  729:  * The App_TransmitCommData() function will perform (single/multi buffered)
  730:  * data transmissions of data received by the serial terminal interface. Data could also come from
  731:  * other sources such as sensors etc. This is completely determined by the
  732:  * application. The constant mDefaultValueOfMaxPendingDataPackets_c determine the maximum
  733:  * number of packets pending for transmission in the MAC. A global variable
  734:  * is incremented each time a data packet is sent to the MCPS, and decremented
  735:  * when the corresponding MCPS-Data Confirm message is received. If the counter
  736:  * reaches the defined maximum no more data buffers are allocated until the
  737:  * counter is decreased below the maximum number of pending packets.
  738:  *
  739:  * The function uses the coordinator information gained during the Active Scan,
  740:  * and the short address assigned to us by coordinator, for building an MCPS-
  741:  * Data Request message. The message is sent to the MCPS service access point
  742:  * in the MAC.
  743:  ******************************************************************************/
  744:  static void App_TransmitCommData(void)
  745:  {   
  746:    static uint8_t keysBuffer[mMaxKeysToReceive_c];
  747:    static uint8_t keysReceived = 0;
  748:    
  749:    /* get data from serial terminal interface */
  750:    if( keysReceived < mMaxKeysToReceive_c ) 
  0000 c60000   [4]             LDA   keysReceived
  0003 a120     [2]             CMP   #32
  0005 2414     [3]             BCC   L1B ;abs = 001b
  751:    {
  752:      if(Comm_GetByteFromRxBuffer(&keysBuffer[keysReceived])) 
  0007 ab00     [2]             ADD   @keysBuffer
  0009 87       [2]             PSHA  
  000a 4f       [1]             CLRA  
  000b a900     [2]             ADC   @keysBuffer:MSB
  000d 88       [3]             PULX  
  000e 87       [2]             PSHA  
  000f 8a       [3]             PULH  
  0010 ac000000 [8]             CALL  Uart1_GetByteFromRxBuffer
  0014 4d       [1]             TSTA  
  0015 2704     [3]             BEQ   L1B ;abs = 001b
  753:      {
  754:      keysReceived++;
  0017 450000   [3]             LDHX  @keysReceived
  001a 7c       [4]             INC   ,X
  001b          L1B:    
  755:      }
  756:    }
  757:  	/* Use multi buffering for increased TX performance. It does not really
  758:       have any effect at a UART baud rate of 19200bps but serves as an
  759:       example of how the throughput may be improved in a real-world 
  760:       application where the data rate is of concern. */
  761:    if( (mcPendingPackets < mDefaultValueOfMaxPendingDataPackets_c) && (mpPacket == NULL) ) 
  001b c60000   [4]             LDA   mcPendingPackets
  001e a102     [2]             CMP   #2
  0020 240e     [3]             BCC   L30 ;abs = 0030
  0022 320000   [5]             LDHX  mpPacket
  0025 2609     [3]             BNE   L30 ;abs = 0030
  762:    {
  763:      /* If the maximum number of pending data buffes is below maximum limit 
  764:         and we do not have a data buffer already then allocate one. */
  765:      mpPacket = MSG_Alloc(gMaxRxTxDataLength_c);
  0027 a69c     [2]             LDA   #-100
  0029 ac000000 [8]             CALL  MM_Alloc
  002d 960000   [5]             STHX  mpPacket
  0030          L30:    
  766:    }
  767:  
  768:    if(mpPacket != NULL)
  0030 320000   [5]             LDHX  mpPacket
  0033 2603     [3]             BNE   L38 ;abs = 0038
  0035 cc00be   [4]             JMP   LBE ;abs = 00be
  0038          L38:    
  769:    {
  770:      /* get data from serial terminal interface */        
  771:        mpPacket->msgData.dataReq.pMsdu = (uint8_t*)(&(mpPacket->msgData.dataReq.pMsdu)) + sizeof(uint8_t*);
  0038 af27     [2]             AIX   #39
  003a 9f       [1]             TXA   
  003b 8b       [2]             PSHH  
  003c 320000   [5]             LDHX  mpPacket
  003f e726     [3]             STA   38,X
  0041 86       [3]             PULA  
  0042 e725     [3]             STA   37,X
  772:        FLib_MemCpy(mpPacket->msgData.dataReq.pMsdu, (uint8_t*) keysBuffer, keysReceived);
  0044 9ece25   [5]             LDHX  37,X
  0047 89       [2]             PSHX  
  0048 8b       [2]             PSHH  
  0049 450000   [3]             LDHX  @keysBuffer
  004c c60000   [4]             LDA   keysReceived
  004f ac000000 [8]             CALL  FLib_MemCpy
  0053 a702     [2]             AIS   #2
  773:        /* Data was available in the serial terminal interface receive buffer. Now create an
  774:           MCPS-Data Request message containing the serial terminal interface data. */
  775:        mpPacket->msgType = gMcpsDataReq_c;
  0055 320000   [5]             LDHX  mpPacket
  0058 7f       [4]             CLR   ,X
  776:        /* Create the header using coordinator information gained during 
  777:           the scan procedure. Also use the short address we were assigned
  778:           by the coordinator during association. */
  779:        FLib_MemCpy(mpPacket->msgData.dataReq.dstAddr, mCoordInfo.coordAddress, 8);
  0059 af01     [2]             AIX   #1
  005b 89       [2]             PSHX  
  005c 8b       [2]             PSHH  
  005d 450000   [3]             LDHX  @mCoordInfo
  0060 a608     [2]             LDA   #8
  0062 ac000000 [8]             CALL  FLib_MemCpy
  0066 a702     [2]             AIS   #2
  780:        FLib_MemCpy(mpPacket->msgData.dataReq.srcAddr, maMyAddress, 8);
  0068 320000   [5]             LDHX  mpPacket
  006b af0c     [2]             AIX   #12
  006d 89       [2]             PSHX  
  006e 8b       [2]             PSHH  
  006f 450000   [3]             LDHX  @maMyAddress
  0072 a608     [2]             LDA   #8
  0074 ac000000 [8]             CALL  FLib_MemCpy
  0078 a702     [2]             AIS   #2
  781:        FLib_MemCpy(mpPacket->msgData.dataReq.dstPanId, mCoordInfo.coordPanId, 2);
  007a 320000   [5]             LDHX  mpPacket
  007d af09     [2]             AIX   #9
  007f ac0000ce [8]             CALL  App_TransmitCommData:206
  782:        FLib_MemCpy(mpPacket->msgData.dataReq.srcPanId, mCoordInfo.coordPanId, 2);
  0083 320000   [5]             LDHX  mpPacket
  0086 af14     [2]             AIX   #20
  0088 ac0000ce [8]             CALL  App_TransmitCommData:206
  783:        mpPacket->msgData.dataReq.dstAddrMode = mCoordInfo.coordAddrMode;
  008c c6000a   [4]             LDA   mCoordInfo:10
  008f 320000   [5]             LDHX  mpPacket
  0092 e70b     [3]             STA   11,X
  784:        mpPacket->msgData.dataReq.srcAddrMode = mAddrMode;
  0094 c60000   [4]             LDA   mAddrMode
  0097 e716     [3]             STA   22,X
  785:        mpPacket->msgData.dataReq.msduLength = keysReceived;
  0099 c60000   [4]             LDA   keysReceived
  009c e717     [3]             STA   23,X
  786:        /* Request MAC level acknowledgement of the data packet */
  787:        mpPacket->msgData.dataReq.txOptions = gTxOptsAck_c;
  009e a601     [2]             LDA   #1
  00a0 e719     [3]             STA   25,X
  788:        /* Give the data packet a handle. The handle is
  789:           returned in the MCPS-Data Confirm message. */
  790:        mpPacket->msgData.dataReq.msduHandle = mMsduHandle++;
  00a2 c60000   [4]             LDA   mMsduHandle
  00a5 e718     [3]             STA   24,X
  00a7 4c       [1]             INCA  
  00a8 c70000   [4]             STA   mMsduHandle
  791:  #ifdef gMAC2006_d
  792:        mpPacket->msgData.dataReq.securityLevel = 0;
  00ab 6f1a     [5]             CLR   26,X
  793:  #endif //gMAC2006_d      
  794:        
  795:        /* Send the Data Request to the MCPS */
  796:        (void)MSG_Send(NWK_MCPS, mpPacket);
  00ad ac000000 [8]             CALL  NWK_MCPS_SapHandler
  797:        /* Prepare for another data buffer */
  798:        mpPacket = NULL;
  00b1 5f       [1]             CLRX  
  00b2 8c       [1]             CLRH  
  00b3 960000   [5]             STHX  mpPacket
  799:        mcPendingPackets++;
  00b6 450000   [3]             LDHX  @mcPendingPackets
  00b9 7c       [4]             INC   ,X
  800:        /* Receive another pressed keys */
  801:        keysReceived = 0;
  00ba 4f       [1]             CLRA  
  00bb c70000   [4]             STA   keysReceived
  00be          LBE:    
  802:    }
  803:        
  804:    /* If the keysBuffer[] wasn't send over the air because there are too many pending packets, */
  805:    /* try to send it later   */
  806:    if (keysReceived)
  00be c60000   [4]             LDA   keysReceived
  00c1 270a     [3]             BEQ   LCD ;abs = 00cd
  807:    {
  808:    TS_SendEvent(gAppTaskID_c, gAppEvtRxFromComm_c);
  00c3 c60000   [4]             LDA   gAppTaskID_c
  00c6 ae02     [2]             LDX   #2
  00c8 8c       [1]             CLRH  
  00c9 ac000000 [8]             CALL  TS_SendEvent
  00cd          LCD:    
  809:    }
  810:  
  811:  }
  00cd 8d       [7]             RTC   
  00ce          LCE:    
  00ce 89       [2]             PSHX  
  00cf 8b       [2]             PSHH  
  00d0 450008   [3]             LDHX  @mCoordInfo:8
  00d3 a602     [2]             LDA   #2
  00d5 ac000000 [8]             CALL  FLib_MemCpy
  00d9 a702     [2]             AIS   #2
  00db 8d       [7]             RTC   
  812:  
  813:  /******************************************************************************
  814:  * The AppPollWaitTimeout() function will check if it is time to send out an
  815:  * MLME-Poll request in order to receive data from the coordinator. If its time,
  816:  * and we are permitted then a poll request is created and sent.
  817:  * 
  818:  * The function uses the coordinator information gained during the Active Scan
  819:  * for building the MLME-Poll Request message. The message is sent to the MLME
  820:  * service access point in the MAC.
  821:  ******************************************************************************/
  822:  static void    AppPollWaitTimeout(uint8_t tmr)
  823:  { 
  0000 87       [2]             PSHA  
  0001 a7fe     [2]             AIS   #-2
  824:    
  825:    /* Just to avoid the compiler warning */
  826:    tmr++;
  0003 95       [2]             TSX   
  0004 6c02     [5]             INC   2,X
  827:    
  828:    /* Check if we are permitted, and if it is time to send a poll request.
  829:       The poll interval is adjusted dynamically to the current band-width
  830:       requirements. */
  831:    if(mWaitPollConfirm == FALSE)
  0006 c60000   [4]             LDA   mWaitPollConfirm
  0009 2648     [3]             BNE   L53 ;abs = 0053
  832:    {
  833:      /* This is an MLME-POLL.req command. */
  834:      mlmeMessage_t *pMlmeMsg = MSG_AllocType(mlmeMessage_t);
  000b a623     [2]             LDA   #35
  000d ac000000 [8]             CALL  MM_Alloc
  0011 9eff01   [5]             STHX  1,SP
  835:      if(pMlmeMsg)
  0014 273d     [3]             BEQ   L53 ;abs = 0053
  836:      {
  837:        /* Create the Poll Request message data. */
  838:        pMlmeMsg->msgType = gMlmePollReq_c;
  0016 9efe01   [5]             LDHX  1,SP
  0019 a60c     [2]             LDA   #12
  001b f7       [2]             STA   ,X
  839:   
  840:        /* Use the coordinator information we got from the Active Scan. */
  841:        FLib_MemCpy(pMlmeMsg->msgData.pollReq.coordAddress, mCoordInfo.coordAddress, 8);
  001c af01     [2]             AIX   #1
  001e 89       [2]             PSHX  
  001f 8b       [2]             PSHH  
  0020 450000   [3]             LDHX  @mCoordInfo
  0023 a608     [2]             LDA   #8
  0025 ac000000 [8]             CALL  FLib_MemCpy
  0029 a702     [2]             AIS   #2
  842:        FLib_MemCpy(pMlmeMsg->msgData.pollReq.coordPanId, mCoordInfo.coordPanId, 2);
  002b 9efe01   [5]             LDHX  1,SP
  002e af09     [2]             AIX   #9
  0030 89       [2]             PSHX  
  0031 8b       [2]             PSHH  
  0032 450008   [3]             LDHX  @mCoordInfo:8
  0035 a602     [2]             LDA   #2
  0037 ac000000 [8]             CALL  FLib_MemCpy
  003b a702     [2]             AIS   #2
  843:        pMlmeMsg->msgData.pollReq.coordAddrMode = mCoordInfo.coordAddrMode;
  003d 9efe01   [5]             LDHX  1,SP
  0040 c6000a   [4]             LDA   mCoordInfo:10
  0043 e70b     [3]             STA   11,X
  844:  #ifndef gMAC2006_d      
  845:        pMlmeMsg->msgData.pollReq.securityEnable = FALSE;
  846:  #else
  847:        pMlmeMsg->msgData.pollReq.securityLevel = 0;
  0045 6f0c     [5]             CLR   12,X
  848:  #endif //gMAC2006_d      
  849:        
  850:        /* Send the Poll Request to the MLME. */
  851:        if(MSG_Send(NWK_MLME, pMlmeMsg) == gSuccess_c)
  0047 ac000000 [8]             CALL  NWK_MLME_SapHandler
  004b 4d       [1]             TSTA  
  004c 2605     [3]             BNE   L53 ;abs = 0053
  852:        {
  853:          /* Do not allow another Poll request before the confirm is received. */
  854:          mWaitPollConfirm = TRUE;
  004e a601     [2]             LDA   #1
  0050 c70000   [4]             STA   mWaitPollConfirm
  0053          L53:    
  855:  
  856:        }
  857:      }
  858:    }
  859:   /* Restart timer. */
  860:   TMR_StartSingleShotTimer(mTimer_c, mPollInterval, AppPollWaitTimeout);
  0053 c60000   [4]             LDA   mTimer_c
  0056 87       [2]             PSHA  
  0057 320000   [5]             LDHX  mPollInterval
  005a 89       [2]             PSHX  
  005b 8b       [2]             PSHH  
  005c 4f       [1]             CLRA  
  005d 87       [2]             PSHA  
  005e 87       [2]             PSHA  
  005f 450000   [3]             LDHX  @AppPollWaitTimeout
  0062 89       [2]             PSHX  
  0063 8b       [2]             PSHH  
  0064 a600     [2]             LDA   @AppPollWaitTimeout:PAGE
  0066 87       [2]             PSHA  
  0067 ac000000 [8]             CALL  TMR_StartSingleShotTimer
  861:  }
  006b a70b     [2]             AIS   #11
  006d 8d       [7]             RTC   
  862:  
  863:  /*****************************************************************************
  864:  * Function to handle a generic key press. Called for all keys.
  865:  *****************************************************************************/
  866:  /****NEWCODE: MODIFIED FUNC, ADDED PARAMETER keyPressed ****/
  867:  static void App_HandleGenericKey(uint8_t keyPressed)
  868:  {
  869:  
  870:    /****NEWCODE: ADDED SWITCH****/
  871:    switch(gState)
  0000 ce0000   [4]             LDX   gState
  0003 2706     [3]             BEQ   LB ;abs = 000b
  0005 a305     [2]             CPX   #5
  0007 2631     [3]             BNE   L3A ;abs = 003a
  0009 202b     [3]             BRA   L36 ;abs = 0036
  000b          LB:     
  872:    {
  873:      case stateInit:
  874:        StopLed1Flashing();
  000b a601     [2]             LDA   #1
  000d ac000000 [8]             CALL  LED_StopFlash
  875:        StopLed2Flashing();
  0011 a602     [2]             LDA   #2
  0013 ac000000 [8]             CALL  LED_StopFlash
  876:        StopLed3Flashing();
  0017 a604     [2]             LDA   #4
  0019 ac000000 [8]             CALL  LED_StopFlash
  877:        StopLed4Flashing();
  001d a608     [2]             LDA   #8
  001f ac000000 [8]             CALL  LED_StopFlash
  878:        Led1Off();
  0023 1000     [5]             BSET  0,0
  879:        Led2Off();
  0025 1800     [5]             BSET  4,0
  880:        Led3Off();
  0027 1006     [5]             BSET  0,6
  881:        Led4Off();
  0029 1206     [5]             BSET  1,6
  882:        LCD_ClearDisplay();
  883:        LCD_WriteString(1,"Application");
  884:        LCD_WriteString(2,"    started");     
  885:        TS_SendEvent(gAppTaskID_c, gAppEvtDummyEvent_c);       
  002b c60000   [4]             LDA   gAppTaskID_c
  002e ae01     [2]             LDX   #1
  0030 8c       [1]             CLRH  
  0031 ac000000 [8]             CALL  TS_SendEvent
  886:      break;
  0035 8d       [7]             RTC   
  0036          L36:    
  887:      case stateListen:
  888:        MyTaskButtonPress(keyPressed);
  0036 ac000000 [8]             CALL  MyTaskButtonPress
  003a          L3A:    
  889:      break;
  890:  
  891:    }
  892:  }
  003a 8d       [7]             RTC   
  893:  
  894:  /*****************************************************************************
  895:  * Handles all key events for this device.
  896:  * Interface assumptions: None
  897:  * Return value: None
  898:  *****************************************************************************/
  899:  #if (gMC1323xMatrixKBD_d == TRUE)
  900:  static void App_HandleKeys(uint8_t events, uint8_t pressedKey)   
  901:  {
  902:   (void)events;
  903:   (void)pressedKey;
  904:   App_HandleGenericKey(pressedKey);
  0000 ac000000 [8]             CALL  App_HandleGenericKey
  905:  }
  0004 8d       [7]             RTC   
  906:  #else
  907:  static void App_HandleKeys(key_event_t events)
  908:  {
  909:    switch ( events ) 
  910:      { 
  911:        case gKBD_EventSW1_c:
  912:        case gKBD_EventSW2_c:
  913:        case gKBD_EventSW3_c:
  914:        case gKBD_EventSW4_c:
  915:        case gKBD_EventLongSW1_c:
  916:        case gKBD_EventLongSW2_c:
  917:        case gKBD_EventLongSW3_c:
  918:        case gKBD_EventLongSW4_c:
  919:          App_HandleGenericKey(pressedKey);
  920:  	    break;	
  921:      }    
  922:  }
  923:  #endif //gMC1323xMatrixKBD_d
  924:  /*****************************************************************************
  925:  * The DeepSleepWakeupStackProc(void) function is called each time the 
  926:  * application exits the DeepSleep mode .
  927:  * 
  928:  * Return value:
  929:  *     None
  930:  *****************************************************************************/
  931:  void DeepSleepWakeupStackProc(void){
  932:    return;
  933:  }
  0000 8d       [7]             RTC   
  934:  
  935:  /******************************************************************************
  936:  * The following functions are called by the MAC to put messages into the
  937:  * Application's queue. They need to be defined even if they are not used
  938:  * in order to avoid linker errors.
  939:  ******************************************************************************/
  940:  
  941:  uint8_t MLME_NWK_SapHandler(nwkMessage_t * pMsg)
  942:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  943:    /* Put the incoming MLME message in the applications input queue. */
  944:    MSG_Queue(&mMlmeNwkInputQueue, pMsg);
  0002 450000   [3]             LDHX  @mMlmeNwkInputQueue
  0005 89       [2]             PSHX  
  0006 8b       [2]             PSHH  
  0007 9efe03   [5]             LDHX  3,SP
  000a ac000000 [8]             CALL  List_AddTail
  000e a702     [2]             AIS   #2
  945:    TS_SendEvent(gAppTaskID_c, gAppEvtMessageFromMLME_c);
  0010 c60000   [4]             LDA   gAppTaskID_c
  0013 ae04     [2]             LDX   #4
  0015 8c       [1]             CLRH  
  0016 ac000000 [8]             CALL  TS_SendEvent
  946:    return gSuccess_c;
  001a 4f       [1]             CLRA  
  947:  }
  001b a702     [2]             AIS   #2
  001d 8d       [7]             RTC   
  948:  
  949:  uint8_t MCPS_NWK_SapHandler(mcpsToNwkMessage_t *pMsg)
  950:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  951:    /* Put the incoming MCPS message in the applications input queue. */
  952:    MSG_Queue(&mMcpsNwkInputQueue, pMsg);
  0002 450000   [3]             LDHX  @mMcpsNwkInputQueue
  0005 89       [2]             PSHX  
  0006 8b       [2]             PSHH  
  0007 9efe03   [5]             LDHX  3,SP
  000a ac000000 [8]             CALL  List_AddTail
  000e a702     [2]             AIS   #2
  953:    TS_SendEvent(gAppTaskID_c, gAppEvtMessageFromMCPS_c);
  0010 c60000   [4]             LDA   gAppTaskID_c
  0013 ae08     [2]             LDX   #8
  0015 8c       [1]             CLRH  
  0016 ac000000 [8]             CALL  TS_SendEvent
  954:    return gSuccess_c;
  001a 4f       [1]             CLRA  
  955:  }
  001b a702     [2]             AIS   #2
  001d 8d       [7]             RTC   
  956:  
  957:  uint8_t ASP_APP_SapHandler(aspToAppMsg_t *pMsg)
  958:  {
  959:    /* If the message is not handled anywhere it must be freed. */
  960:    MSG_Free(pMsg);
  0000 ac000000 [8]             CALL  MM_Free
  961:    return gSuccess_c;
  0004 4f       [1]             CLRA  
  962:  }
  0005 8d       [7]             RTC   
  963:  
  964:  /******************************************************************************/
  965:  
