ANSI-C/cC++ Compiler for HC08 V-5.0.45 Build 14019, Jan 20 2014

    1:  /*
    2:   * MyNewTask.c
    3:   *
    4:   *  Created on: Aug 10, 2016
    5:   *      Author: B42931
    6:   */
    7:  
    8:  #include "MyNewTask.h"
    9:  #include "CommUtil.h"      /* Defines the interface of the demo serial terminal interface. */
   10:  #include "FunctionLib.h"
   11:  
   12:  
   13:  /* Global Variable to store our TimerID */
   14:  tmrTimerID_t myTimerID;
   15:  tsTaskID_t myNewTaskID;
   16:  char *strCounter1 = "Counter:1";
   17:  char *strCounter2 = "Counter:2";
   18:  char *strCounter3 = "Counter:3";
   19:  char *strCounter4 = "Counter:4";
   20:  char *tmpString;
   21:  		
   22:  
   23:  /* Local variable to store the current state of the LEDs */
   24:  static uint8_t ledsState;
   25:  
   26:  /* Timer Callback prototype */
   27:  void myTaskTimerCallback(tmrTimerID_t timer);
   28:  
   29:  /* myNewTask main function that will handle the events*/
   30:  void MyNewTask(event_t events)
   31:  {
  0000 8b       [2]             PSHH  
   32:  	/* Depending on the received event */
   33:  	switch(events){
  0001 afff     [2]             AIX   #-1
  0003 8b       [2]             PSHH  
  0004 86       [3]             PULA  
  0005 cd0000   [6]             JSR   _Jump_Table_Header_Offset
  0008 04               DC.B  4
  0009 89               DC.B  L93
  000a 03               DC.B  LE
  000b 25               DC.B  L31
  000c 86               DC.B  L93
  000d 76               DC.B  L84
  000e          LE:     
   34:  	case gMyNewTaskEvent1_c:
   35:  		TMR_StartTimer(myTimerID, 		/* Timer ID allocated in "MyNewTaskInit()", called in MApp_init.c during initialization */
  000e c60000   [4]             LDA   myTimerID
  0011 87       [2]             PSHA  
  0012 a602     [2]             LDA   #2
  0014 87       [2]             PSHA  
  0015 450bb8   [3]             LDHX  #3000
  0018 89       [2]             PSHX  
  0019 8b       [2]             PSHH  
  001a 4f       [1]             CLRA  
  001b 87       [2]             PSHA  
  001c 87       [2]             PSHA  
  001d 450000   [3]             LDHX  @myTaskTimerCallback
  0020 89       [2]             PSHX  
  0021 8b       [2]             PSHH  
  0022 a600     [2]             LDA   @myTaskTimerCallback:PAGE
  0024 87       [2]             PSHA  
  0025 ac000000 [8]             CALL  TMR_StartTimer
  0029 a709     [2]             AIS   #9
   36:  				       gTmrIntervalTimer_c, /* Type of timer: INTERVAL */
   37:  				       3000, 				/* Timer's Timeout */
   38:  				       myTaskTimerCallback 	/* pointer to myTaskTimerCallback function */
   39:  				       );
   40:  		TurnOffLeds();	/* Ensure all LEDs are turned off */
  002b ac000000 [8]             CALL  LED_TurnOffAllLeds
   41:  		break;
   42:  	case gMyNewTaskEvent2_c:	/* Event called from myTaskTimerCallback */
   43:  		/****NEWCODE: CHANGE LED STATE****/
   44:  		ledsState = ++ledsState > 4 ? 1 : ledsState;
   45:  		TurnOffLeds();
   46:  		switch(ledsState){
   47:  			case 1:
   48:  				Led1On();
   49:  				tmpString = strCounter1;
   50:  			break;
   51:  			case 2:
   52:  				Led2On();
   53:  				tmpString = strCounter2;
   54:  			break;
   55:  			case 3:
   56:  				Led3On();
   57:  				tmpString = strCounter3;
   58:  			break;
   59:  			case 4:
   60:  				Led4On();
   61:  				tmpString = strCounter4;
   62:  			break;
   63:  				
   64:  		}
   65:  		genericDataTransfer(tmpString, 9);
   66:  		/****NEWCODE: CHANGE LED STATE****/
   67:  		
   68:  		break;
   69:  	case gMyNewTaskEvent3_c:	/* Event to stop the timer */
   70:  		ledsState = 0;
   71:  		TurnOffLeds();
   72:  		TMR_StopTimer(myTimerID);
   73:  		break;
   74:  	default:
   75:  		break;
   76:  	}
   77:  }
  002f 8a       [3]             PULH  
  0030 8d       [7]             RTC   
  0031          L31:    
  0031 450000   [3]             LDHX  @ledsState
  0034 7c       [4]             INC   ,X
  0035 c60000   [4]             LDA   ledsState
  0038 a104     [2]             CMP   #4
  003a 2302     [3]             BLS   L3E ;abs = 003e
  003c a601     [2]             LDA   #1
  003e          L3E:    
  003e 95       [2]             TSX   
  003f f7       [2]             STA   ,X
  0040 fe       [3]             LDX   ,X
  0041 cf0000   [4]             STX   ledsState
  0044 ac000000 [8]             CALL  LED_TurnOffAllLeds
  0048 c60000   [4]             LDA   ledsState
  004b a104     [2]             CMP   #4
  004d 222a     [3]             BHI   L79 ;abs = 0079
  004f a001     [2]             SUB   #1
  0051 97       [1]             TAX   
  0052 4f       [1]             CLRA  
  0053 cd0000   [6]             JSR   _Jump_Table_Header_Offset
  0056 04               DC.B  4
  0057 21               DC.B  L79
  0058 03               DC.B  L5C
  0059 09               DC.B  L63
  005a 0f               DC.B  L6A
  005b 15               DC.B  L71
  005c          L5C:    
  005c 1100     [5]             BCLR  0,0
  005e 320000   [5]             LDHX  strCounter1
  0061 2013     [3]             BRA   L76 ;abs = 0076
  0063          L63:    
  0063 1900     [5]             BCLR  4,0
  0065 320000   [5]             LDHX  strCounter2
  0068 200c     [3]             BRA   L76 ;abs = 0076
  006a          L6A:    
  006a 1106     [5]             BCLR  0,6
  006c 320000   [5]             LDHX  strCounter3
  006f 2005     [3]             BRA   L76 ;abs = 0076
  0071          L71:    
  0071 1306     [5]             BCLR  1,6
  0073 320000   [5]             LDHX  strCounter4
  0076          L76:    
  0076 960000   [5]             STHX  tmpString
  0079          L79:    
  0079 320000   [5]             LDHX  tmpString
  007c a609     [2]             LDA   #9
  007e ac000000 [8]             CALL  genericDataTransfer
  0082 8a       [3]             PULH  
  0083 8d       [7]             RTC   
  0084          L84:    
  0084 4f       [1]             CLRA  
  0085 c70000   [4]             STA   ledsState
  0088 ac000000 [8]             CALL  LED_TurnOffAllLeds
  008c c60000   [4]             LDA   myTimerID
  008f ac000000 [8]             CALL  TMR_StopTimer
  0093          L93:    
  0093 8a       [3]             PULH  
  0094 8d       [7]             RTC   
   78:  
   79:  /* This function is called in MApp_init.c during initialization ( main() )
   80:   * It will INITIALIZE all required components for the task to work and then 
   81:   * call an event for the new Task.*/
   82:  void MyNewTaskInit(void)
   83:  {
   84:  	/* Allocate in memory the timer*/
   85:  	myTimerID = TMR_AllocateTimer();
  0000 ac000000 [8]             CALL  TMR_AllocateTimer
  0004 c70000   [4]             STA   myTimerID
   86:  	ledsState = 0;
  0007 4f       [1]             CLRA  
  0008 c70000   [4]             STA   ledsState
   87:  	/* Create the New Task */
   88:  	myNewTaskID = TS_CreateTask(gMyNewTaskPriority_c, MyNewTask);
  000b a681     [2]             LDA   #-127
  000d 87       [2]             PSHA  
  000e 450000   [3]             LDHX  @MyNewTask
  0011 89       [2]             PSHX  
  0012 8b       [2]             PSHH  
  0013 a600     [2]             LDA   @MyNewTask:PAGE
  0015 87       [2]             PSHA  
  0016 ac000000 [8]             CALL  TS_CreateTask
  001a a704     [2]             AIS   #4
  001c c70000   [4]             STA   myNewTaskID
   89:  	/* Send an Event to myNewTask with the first event */
   90:  	TS_SendEvent(myNewTaskID, gMyNewTaskEvent1_c); 
  001f ae01     [2]             LDX   #1
  0021 8c       [1]             CLRH  
  0022 ac000000 [8]             CALL  TS_SendEvent
   91:  }
  0026 8d       [7]             RTC   
   92:  
   93:  /* This is the function called by the Timer each time it expires */
   94:  static void myTaskTimerCallback(tmrTimerID_t timer)
   95:  {
   96:  	(void)timer; // this line is just to clear a warning
   97:  	TS_SendEvent(myNewTaskID, gMyNewTaskEvent2_c);
  0000 c60000   [4]             LDA   myNewTaskID
  0003 ae02     [2]             LDX   #2
  0005 8c       [1]             CLRH  
  0006 ac000000 [8]             CALL  TS_SendEvent
   98:  }
  000a 8d       [7]             RTC   
   99:  
  100:  /* Public function to send an event to stop the timer */
  101:  void MyTaskTimer_Stop(void)
  102:  {
  103:  	TS_SendEvent(myNewTaskID, gMyNewTaskEvent3_c);
  0000 c60000   [4]             LDA   myNewTaskID
  0003 ae04     [2]             LDX   #4
  0005 8c       [1]             CLRH  
  0006 ac000000 [8]             CALL  TS_SendEvent
  104:  }
  000a 8d       [7]             RTC   
  105:  
  106:  void MyTaskButtonPress(uint8_t buttonPressed){
  0000 87       [2]             PSHA  
  107:  	TMR_StopTimer(myTimerID);
  0001 c60000   [4]             LDA   myTimerID
  0004 ac000000 [8]             CALL  TMR_StopTimer
  108:  	
  109:  	switch(buttonPressed){
  0008 95       [2]             TSX   
  0009 f6       [3]             LDA   ,X
  000a a104     [2]             CMP   #4
  000c 223a     [3]             BHI   L48 ;abs = 0048
  000e a001     [2]             SUB   #1
  0010 97       [1]             TAX   
  0011 4f       [1]             CLRA  
  0012 cd0000   [6]             JSR   _Jump_Table_Header_Offset
  0015 04               DC.B  4
  0016 31               DC.B  L48
  0017 03               DC.B  L1B
  0018 0d               DC.B  L26
  0019 17               DC.B  L31
  001a 21               DC.B  L3C
  001b          L1B:    
  110:          case switch1Value:
  111:            CommUtil_Print("Switch 1 Pressed",gAllowToBlock_d);
  001b 450000   [3]             LDHX  @"Switch 1 Pressed"
  001e ac000071 [8]             CALL  MyTaskButtonPress:113
  112:            ledsState = 4;
  0022 a604     [2]             LDA   #4
  113:            break;
  0024 201f     [3]             BRA   L45 ;abs = 0045
  0026          L26:    
  114:          case switch2Value:
  115:            CommUtil_Print("Switch 2 Pressed",gAllowToBlock_d);
  0026 450000   [3]             LDHX  @"Switch 2 Pressed"
  0029 ac000071 [8]             CALL  MyTaskButtonPress:113
  116:            ledsState = 1;
  002d a601     [2]             LDA   #1
  117:            break;
  002f 2014     [3]             BRA   L45 ;abs = 0045
  0031          L31:    
  118:          case switch3Value:
  119:            CommUtil_Print("Switch 3 Pressed",gAllowToBlock_d);
  0031 450000   [3]             LDHX  @"Switch 3 Pressed"
  0034 ac000071 [8]             CALL  MyTaskButtonPress:113
  120:            ledsState = 2;
  0038 a602     [2]             LDA   #2
  121:            break;
  003a 2009     [3]             BRA   L45 ;abs = 0045
  003c          L3C:    
  122:          case switch4Value:
  123:            CommUtil_Print("Switch 4 Pressed",gAllowToBlock_d);
  003c 450000   [3]             LDHX  @"Switch 4 Pressed"
  003f ac000071 [8]             CALL  MyTaskButtonPress:113
  124:            ledsState = 3;
  0043 a603     [2]             LDA   #3
  0045          L45:    
  0045 c70000   [4]             STA   ledsState
  0048          L48:    
  125:          default:
  126:            break;
  127:      }
  128:  
  129:  
  130:  	TMR_StartTimer(myTimerID, 		/* Timer ID allocated in "MyNewTaskInit()", called in MApp_init.c during initialization */
  0048 c60000   [4]             LDA   myTimerID
  004b 87       [2]             PSHA  
  004c a602     [2]             LDA   #2
  004e 87       [2]             PSHA  
  004f 450bb8   [3]             LDHX  #3000
  0052 89       [2]             PSHX  
  0053 8b       [2]             PSHH  
  0054 4f       [1]             CLRA  
  0055 87       [2]             PSHA  
  0056 87       [2]             PSHA  
  0057 450000   [3]             LDHX  @myTaskTimerCallback
  005a 89       [2]             PSHX  
  005b 8b       [2]             PSHH  
  005c a600     [2]             LDA   @myTaskTimerCallback:PAGE
  005e 87       [2]             PSHA  
  005f ac000000 [8]             CALL  TMR_StartTimer
  0063 a709     [2]             AIS   #9
  131:  				       gTmrIntervalTimer_c, /* Type of timer: INTERVAL */
  132:  				       3000, 				/* Timer's Timeout */
  133:  				       myTaskTimerCallback 	/* pointer to myTaskTimerCallback function */
  134:  				       );
  135:  	TS_SendEvent(myNewTaskID,gMyNewTaskEvent2_c);
  0065 c60000   [4]             LDA   myNewTaskID
  0068 ae02     [2]             LDX   #2
  006a 8c       [1]             CLRH  
  006b ac000000 [8]             CALL  TS_SendEvent
  136:  }
  006f 8a       [3]             PULH  
  0070 8d       [7]             RTC   
  0071          L71:    
  0071 a601     [2]             LDA   #1
  0073 ac000000 [8]             CALL  CommUtil_Print
  0077 8d       [7]             RTC   
  137:  
  138:  
