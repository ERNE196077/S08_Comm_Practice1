ANSI-C/cC++ Compiler for HC08 V-5.0.45 Build 14019, Jan 20 2014

    1:  /*****************************************************************************
    2:  * Applications' initialization module
    3:  *
    4:  * (c) Copyright 2006, Freescale, Inc. All rights reserved.
    5:  *
    6:  *
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from Freescale Semiconductor Romania A/S.
   10:  *
   11:  *****************************************************************************/
   12:  
   13:  #include "EmbeddedTypes.h"
   14:  #include "Mapp_init.h"
   15:  #include "Mac_Globals.h"
   16:  #include "MacInit.h"
   17:  #include "NVM_Interface.h"
   18:  #include "Uart_Interface.h"
   19:  #ifdef PROCESSOR_MC13238C
   20:    #include "CDC_Interface.h"
   21:    #include "USB_Interface.h"
   22:  #endif
   23:  #if gZtcIncluded_d
   24:  #include "ZTCInterface.h"
   25:  #endif /* gZtcIncluded_d */
   26:  
   27:  /************************************************************************************
   28:  *************************************************************************************
   29:  * Private macros
   30:  *************************************************************************************
   31:  ************************************************************************************/
   32:  
   33:  
   34:  /************************************************************************************
   35:  *************************************************************************************
   36:  * Private prototypes
   37:  *************************************************************************************
   38:  ************************************************************************************/
   39:  
   40:  void IdleTask(event_t event);
   41:  void AppTask(event_t events);
   42:  tsTaskID_t gAppTaskID_c;
   43:  
   44:  /************************************************************************************
   45:  *************************************************************************************
   46:  * Private type definitions
   47:  *************************************************************************************
   48:  ************************************************************************************/
   49:  
   50:  /************************************************************************************
   51:  *************************************************************************************
   52:  * Private memory declarations
   53:  *************************************************************************************
   54:  ************************************************************************************/
   55:  
   56:  extern uint8_t aExtendedAddress[8];
   57:  extern uint8_t gState;
   58:  
   59:  
   60:  
   61:  #if gNvStorageIncluded_d
   62:  static bool_t receiverOn;
   63:  #endif
   64:  /************************************************************************************
   65:  *************************************************************************************
   66:  * Public functions
   67:  *************************************************************************************
   68:  ************************************************************************************/
   69:  extern void MacPhyInit_WriteExtAddress(uint8_t *pExtendedAddress);
   70:  
   71:  /*****************************************************************************
   72:  * main function
   73:  *
   74:  * Interface assumptions:
   75:  * 
   76:  * Return value:
   77:  * None
   78:  *****************************************************************************/
   79:  
   80:   void main(void)
   81:   {
   82:   #ifdef BOOTLOADER_ENABLED	
   83:    NVM_FindNVRAM();
   84:   #endif	
   85:   
   86:    /* Interrupts should already be off. This is probably redundant. */
   87:    IrqControlLib_DisableAllIrqs();
  0000 9b       [1]             SEI   
   88:    Platform_Init();    // Init platform
  0001 ac000000 [8]             CALL  Platform_Init
   89:    Init_802_15_4();
  0005 ac000000 [8]             CALL  Init_802_15_4
   90:  
   91:    TS_Init();  
  0009 ac000000 [8]             CALL  TS_Init
   92:    TMR_Init();                          /* Init the kernel. */
  000d ac000000 [8]             CALL  TMR_Init
   93:    NvModuleInit();
   94:    Uart_ModuleInit();
  0011 ac000000 [8]             CALL  Uart_ModuleInit
   95:    #ifdef PROCESSOR_MC13238C
   96:      USB_Init();
   97:      (void)CDC_ModuleInit();
   98:    #endif
   99:    MacInit();
  0015 ac000000 [8]             CALL  MacInit
  100:    #if gZtcIncluded_d
  101:    Ztc_TaskInit();
  102:    #endif /* gZtcIncluded_d */ 
  103:  
  104:    /*initialize the application*/
  105:   
  106:    gAppTaskID_c = TS_CreateTask(gTsAppTaskPriority_c, AppTask);
  0019 a680     [2]             LDA   #-128
  001b 87       [2]             PSHA  
  001c 450000   [3]             LDHX  @AppTask
  001f 89       [2]             PSHX  
  0020 8b       [2]             PSHH  
  0021 a600     [2]             LDA   @AppTask:PAGE
  0023 87       [2]             PSHA  
  0024 ac000000 [8]             CALL  TS_CreateTask
  0028 a704     [2]             AIS   #4
  002a c70000   [4]             STA   gAppTaskID_c
  107:   
  108:    MApp_init();
  002d ac000000 [8]             CALL  MApp_init
  109:    /*do not allow the device to enter sleep mode*/
  110:    PWR_DisallowDeviceToSleep();   
  0031 ac000000 [8]             CALL  PWR_DisallowDeviceToSleep
  111:    /*All LED's are switched OFF*/
  112:    Led1Off();
  0035 1000     [5]             BSET  0,0
  113:    Led2Off();
  0037 1800     [5]             BSET  4,0
  114:    Led3Off();
  0039 1006     [5]             BSET  0,6
  115:    Led4Off();
  003b 1206     [5]             BSET  1,6
  116:    /* if the board is mc13213 SRB or NCB turn on LED5 */
  117:    #if (gTargetMC13213SRB_d == 1) || (gTargetMC13213NCB_d == 1) || ((gTarget_UserDefined_d == 1) && (!defined(PROCESSOR_MC1323X)) && (!defined(PROCESSOR_QE128)))
  118:      Led5On();
  119:    #endif
  120:    
  121:    /* Start the task scheduler. Does not return. */
  122:    TS_Scheduler(); 
  003d ac000000 [8]             CALL  TS_Scheduler
  123:   
  124:  }
  0041 8d       [7]             RTC   
  125:  
  126:  
  127:  #if gNvStorageIncluded_d
  128:  
  129:  void BUtl_SetReceiverOff(void)
  130:  {
  131:   /* This function is called by the NVM component at the start of the NV operation */
  132:   mlmeMessage_t msg;	  
  133:   bool_t value; 
  134:   /* get the receiver state */
  135:   
  136:   msg.msgType = gMlmeGetReq_c;
  137:   msg.msgData.getReq.pibAttribute = gMPibRxOnWhenIdle_c;
  138:   msg.msgData.getReq.pibAttributeValue = &value; 
  139:   (void)MSG_Send(NWK_MLME, &msg);
  140:   
  141:   if(value)
  142:   {
  143:    /* Turn off the receiver during NVM operation */
  144:    receiverOn = TRUE;
  145:    
  146:    value = FALSE;
  147:    msg.msgType = gMlmeSetReq_c;
  148:    msg.msgData.setReq.pibAttribute = gMPibRxOnWhenIdle_c;
  149:    msg.msgData.setReq.pibAttributeValue = &value;
  150:    (void)MSG_Send(NWK_MLME, &msg);
  151:   }
  152:   else
  153:   {
  154:    /* Receiver already turned off */
  155:    receiverOn = FALSE;
  156:   }
  157:   
  158:  }
  159:  
  160:  void BUtl_SetReceiverOn(void)
  161:  {
  162:   /* This function is called by the NVM component at the end of the NV operation */
  163:   mlmeMessage_t msg;	  
  164:   bool_t value = TRUE;
  165:   if(receiverOn == TRUE)
  166:   {  
  167:    /* Restore receiver state */
  168:    msg.msgType = gMlmeSetReq_c;
  169:    msg.msgData.setReq.pibAttribute = gMPibRxOnWhenIdle_c;
  170:    msg.msgData.setReq.pibAttributeValue = &value;
  171:    (void)MSG_Send(NWK_MLME, &msg);
  172:   } 
  173:  }
  174:  
  175:  #endif
  176:  
  177:  /*****************************************************************************
  178:  * Entry point to the idle task
  179:  *
  180:  * Interface assumptions:
  181:  * Cannot use any call by which this task has to be suspended.This task should
  182:  * always be ready to run if there are no other tasks in the system
  183:  * 
  184:  * Return value:
  185:  * None
  186:  *****************************************************************************/
  187:  
  188:  void IdleTask(event_t events)
  189:  {
  190:    /* Just to avoid the compiler warning */
  191:    (void)events;
  192:  
  193:   #if gNvStorageIncluded_d
  194:    /* Process NV Storage save-on-idle and save-on-count requests. */
  195:    NvIdle();
  196:   #endif
  197:  
  198:      
  199:    #if (gLpmIncluded_d == 1)
  200:    /*Low power management*/
  201:      if(PWR_CheckIfDeviceCanGoToSleep())    
  202:        PWR_EnterLowPower();
  203:    #endif /*gLpmIncluded_d*/         
  204:      
  205:  }
  0000 8d       [7]             RTC   
  206:  
  207:  
  208:  /*****************************************************************************
  209:  * Initialize the MAC 64 bit address
  210:  *
  211:  * Interface assumptions:
  212:  * None
  213:  * 
  214:  * Return value:
  215:  * None
  216:  *****************************************************************************/
  217:  void Init_MacExtendedAddress(void)
  218:  {
  0000 a7f8     [2]             AIS   #-8
  219:  
  220:    uint8_t tempExtAddress[8] = {mDefaultValueOfExtendedAddress_c};
  0002 a6e6     [2]             LDA   #-26
  0004 95       [2]             TSX   
  0005 f7       [2]             STA   ,X
  0006 a6ff     [2]             LDA   #-1
  0008 e701     [3]             STA   1,X
  000a e702     [3]             STA   2,X
  000c e703     [3]             STA   3,X
  000e e704     [3]             STA   4,X
  0010 e705     [3]             STA   5,X
  0012 e706     [3]             STA   6,X
  0014 e707     [3]             STA   7,X
  221:    /*Check if Extended address is already generated(if the Extended Address 
  222:    is All "0xFF", it means that no extended address is genereted);If not set
  223:    it to the value chosen by application layer*/
  224:    if((aExtendedAddress[0] & aExtendedAddress[1]
  0016 c60000   [4]             LDA   aExtendedAddress
  0019 c40001   [4]             AND   aExtendedAddress:1
  001c c40002   [4]             AND   aExtendedAddress:2
  001f c40003   [4]             AND   aExtendedAddress:3
  0022 c40004   [4]             AND   aExtendedAddress:4
  0025 c40005   [4]             AND   aExtendedAddress:5
  0028 c40006   [4]             AND   aExtendedAddress:6
  002b c40007   [4]             AND   aExtendedAddress:7
  002e 4c       [1]             INCA  
  002f 2604     [3]             BNE   L35 ;abs = 0035
  225:      & aExtendedAddress[2] & aExtendedAddress[3]
  226:      & aExtendedAddress[4] & aExtendedAddress[5]
  227:      & aExtendedAddress[6] & aExtendedAddress[7]) 
  228:      == 0xFF) 
  229:      {
  230:      /*Set the Extended Address From the App*/
  231:        MacPhyInit_WriteExtAddress(tempExtAddress);
  0031 ac000000 [8]             CALL  MacPhyInit_WriteExtAddress
  0035          L35:    
  232:      }
  233:  }
  0035 a708     [2]             AIS   #8
  0037 8d       [7]             RTC   
  234:  
  235:  /******************************************************************************
  236:  * BeeAppAssert
  237:  *
  238:  * Something failed in the stack or app that can't recover. Stop here. Mostly
  239:  * used during debug phase of product. Could be used
  240:  ******************************************************************************/
  241:  void BeeAppAssert
  242:    (
  243:    assertCode_t code /* IN: why the assert failed */
  244:    )
  245:  {
  0000 8b       [2]             PSHH  
  246:    volatile bool_t waitForever = code; /* just set to anything non-zero */
  0001 95       [2]             TSX   
  0002 f7       [2]             STA   ,X
  0003          L3:     
  247:    
  248:    while (waitForever)
  0003 7d       [3]             TST   ,X
  0004 26fd     [3]             BNE   L3 ;abs = 0003
  249:      { }
  250:  }
  0006 8a       [3]             PULH  
  0007 8d       [7]             RTC   
  251:  
  252:  /******************************************************************************
  253:  * Swap2Bytes - needed for ZTC
  254:  *
  255:  * Swaps two bytes
  256:  ******************************************************************************/
  257:  uint16_t Swap2Bytes(uint16_t iOldValue)
  258:  {
  0000 a7fe     [2]             AIS   #-2
  259:    uint16_t iValue;
  260:  
  261:    iValue = ((uint8_t *)&iOldValue)[1] << 8;
  262:    iValue += ((uint8_t *)&iOldValue)[0];
  0002 8b       [2]             PSHH  
  0003 9eef02   [4]             STX   2,SP
  0006 95       [2]             TSX   
  0007 6f02     [5]             CLR   2,X
  0009 86       [3]             PULA  
  000a e702     [3]             STA   2,X
  263:  
  264:    return iValue;
  000c 9efe01   [5]             LDHX  1,SP
  265:  }
  000f a702     [2]             AIS   #2
  0011 8d       [7]             RTC   
  266:  
  267:  /******************************************************************************
  268:  * Swap4Bytes - needed for ZTC
  269:  *
  270:  * Swaps two bytes
  271:  ******************************************************************************/
  272:  uint32_t Swap4Bytes(uint32_t iOldValue)
  273:  {
  0000 a7fc     [2]             AIS   #-4
  274:    uint32_t iValue;
  275:  
  276:    ((uint8_t*)&iValue)[0] = ((uint8_t *)&iOldValue)[3];
  0002 95       [2]             TSX   
  0003 e60a     [3]             LDA   10,X
  0005 f7       [2]             STA   ,X
  277:    ((uint8_t*)&iValue)[1] = ((uint8_t *)&iOldValue)[2];
  0006 e609     [3]             LDA   9,X
  0008 e701     [3]             STA   1,X
  278:    ((uint8_t*)&iValue)[2] = ((uint8_t *)&iOldValue)[1];
  000a e608     [3]             LDA   8,X
  000c e702     [3]             STA   2,X
  279:    ((uint8_t*)&iValue)[3] = ((uint8_t *)&iOldValue)[0];
  000e e607     [3]             LDA   7,X
  0010 e703     [3]             STA   3,X
  280:  
  281:    return iValue;
  0012 9efe0c   [5]             LDHX  12,SP
  0015 89       [2]             PSHX  
  0016 8b       [2]             PSHH  
  0017 95       [2]             TSX   
  0018 af02     [2]             AIX   #2
  001a a604     [2]             LDA   #4
  001c cd0000   [6]             JSR   _COPY
  282:  }
  001f a704     [2]             AIS   #4
  0021 8d       [7]             RTC   
  283:  /*******************************************************************************/
  284:  
